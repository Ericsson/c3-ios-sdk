// Generated by Apple Swift version 4.0 effective-3.2 (swiftlang-900.0.65.2 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import JavaScriptCore;
@import MatrixSDK;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("cct")

/// Base for classes which generate events to which one can bind to.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct12EventEmitter")
@interface EventEmitter : NSObject
/// Removes a listener associated with an event. At most one listener is removed, if the same listener has been
/// added multiple times, only the first listener is removed.
/// version:
/// 1.0.0
/// \param eventType The event type from which to remove the listener(s).
///
/// \param target The target that should be removed. If omitted, all listeners for the event type are
/// removed.
///
/// \param callback The callback that should be removed. If omitted, all listeners for the target are
/// removed.
///
- (void)off:(NSString * _Nonnull)eventType target:(id _Nullable)target callback:(SEL _Nullable)callback;
/// Adds a new listener for an event. All listeners will be called in the order in which they were added. Adding an
/// already added listener is not an error and will result in the listener being called multiple times.
/// version:
/// 1.0.0
/// \param eventType The event to listen for.
///
/// \param target An owner of the selector that will be called whenever the event is emitted.
///
/// \param callback A selector that will be called whenever the event is emitted.
///
/// \param argument Optional value to be sent as first argument to the callback.
///
- (void)on:(NSString * _Nonnull)eventType target:(id _Nonnull)target callback:(SEL _Nonnull)callback argument:(id _Nullable)argument;
/// Works like on, but the listener is at most called once, and then removed.
/// version:
/// 1.0.0
/// \param eventType The event to listen for.
///
/// \param target An owner of the selector that will be called whenever the event is emitted.
///
/// \param callback A selector that will be called whenever the event is emitted.
///
- (void)once:(NSString * _Nonnull)eventType target:(id _Nonnull)target callback:(SEL _Nonnull)callback argument:(id _Nullable)argument;
/// Emits an event of given type for every listener associated with the event.
/// version:
/// 1.0.0
/// \param eventType The event type for which to emit the event.
///
/// \param value Optional argument to pass to the listeners associated with the event.
///
- (void)emit:(NSString * _Nonnull)eventType :(id _Null_unspecified)value;
- (void)close;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class C3Error;

/// Represents account data that is persistent and unique to each client. It is synchronized between all clients of the
/// same user, and can be used for e.g. settings or unread notifications.
/// Account data can be scoped either to the user or to a room. It is accessed through <code>Client.accountData</code> and
/// <code>Room.accountData</code>.
/// Each account data is a key-value pair store that emits events when values are changed.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>update</code>:       Emitted when any account data entry changes. Receives <code>DataUpdate</code> instance.
///   </li>
///   <li>
///     <code>update:<key></code>: Emitted when the value associated with the given key is changed. Receives the new value, if any.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct11AccountData")
@interface AccountData : EventEmitter
/// A list of all keys that have been set.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/// Gets the value for the corresponding key.
/// version:
/// 1.0.0
/// \param key The key whose associated value should be returned.
///
///
/// returns:
/// The value associated with the key.
- (id _Nullable)get:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the key has been set.
/// version:
/// 1.0.0
/// \param key The key to test if it has been set.
///
///
/// returns:
/// True if the key has been set, false otherwise.
- (BOOL)has:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Sets the value that a key should be associated with. This will override any existing association with the key.
/// remark: It is best to avoid relying on the callbacks to modify application state, e.g. UI updates, as that will
/// lead to race conditions and undefined behaviour. It is better to use the callbacks for feedback that the state
/// was changed was successfully, and the application state changes an <code>update</code> event handler. This is due to the
/// fact that state changes are received via the event stream, but the callback is resolved when the request is
/// returned, and those two events can happen in any order.
/// version:
/// 1.0.0
/// \param key The key that should be associated with the value.
///
/// \param value The value that should be associated with the key.
///
/// \param success The callback to be executed upon successful set. Receives account data instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)set:(id _Nonnull)value for:(NSString * _Nonnull)key success:(void (^ _Nullable)(AccountData * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// A class which provides a way to read and modify a set of data that is synchronized between all the peers of a
/// component.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct10AttachData")
@interface AttachData : NSObject
/// A collection of all owner ids for the data in this map. If an owner id exists for a given key a entry must exist
/// in the map as well, although the opposite is not always true.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull owners;
/// The number of entries in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger size;
/// All the keys in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/// All the values in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray * _Nonnull values;
/// Clears all the data in the map.
/// Clearing the map locally will not trigger <code>RtcComponent.receivedDataUpdate(_:)</code> call, that only happens for
/// remote updates.
/// version:
/// 1.0.0
/// \param ownerId The owner id to use when clearing the map.
///
- (void)clearWithOwnerId:(NSString * _Nullable)ownerId;
/// Deletes an existing value of the corresponding key.
/// Deleting a local value will not trigger <code>RtcComponent.receivedDataUpdate(_:)</code> call, that only happens for remote
/// updates.
/// version:
/// 1.0.0
/// <ul>
///   <li>
///     ownerId:       The owner id to use when deleting the value.
///   </li>
/// </ul>
/// \param key The key to delete the value for.
///
- (void)delete:(NSString * _Nonnull)key ownerId:(NSString * _Nullable)ownerId;
/// Returns the value for the given key.
/// version:
/// 1.0.0
/// \param key The key to look for.
///
///
/// returns:
/// The value for the given key or nil if the key does not exist.
- (id _Nullable)get:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an entry for the given key.
/// version:
/// 1.0.0
/// \param key The key to look for.
///
///
/// returns:
/// True if there is an entry for the given key.
- (BOOL)has:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Sets set value for the given key, along with an ownership id.
/// Setting the ownership allows data to be transparently overridden by users that are joining or rejoining the data
/// synchronization network. Usually the ownerId will be set to the id of the user, but it can sometimes be useful
/// to use other values, such as the role of the user, e.g. <code>"moderator"</code>.
/// Since values can be updated while a call is not connected, the values that are set when disconnected may be
/// updated once you are connected with the rest of the users. When relaying some kind of state to other peers this
/// can cause problems, as the updates that you sent out before a reconnect will cause an update to your local
/// values. By tagging data with an owner id, it is possible to rejoin a data synchronization group and
/// transparently update your exsting values with the new state, without causing a local update to trigger.
/// Setting a local value will not trigger <code>RtcComponent.receivedDataUpdate(_:)</code> call, that only happens for remote
/// updates.
/// version:
/// 1.0.0
/// \param value The value to set.
///
/// \param key The key of the value.
///
/// \param ownerId The owner id to use when setting the value.
///
- (void)set:(id _Nonnull)value for:(NSString * _Nonnull)key ownerId:(NSString * _Nullable)ownerId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end





@class RtcPeer;

/// A class which provides an interface for components that are attached to a call or conference. Should not be
/// constructed directly.
/// The lifetime of the attach point is tied to the attachment of the component. The attach point can only be accessed
/// while the components is attached to something, if it isn’t an error will be thrown.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct11AttachPoint")
@interface AttachPoint : NSObject
/// Data that is synchronized between all peers.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) AttachData * _Nullable data;
/// The identitfy of the own user, this will always be equal to what other users will see as the peerId. This is
/// usually equal to the userId, but that is not guaranteed.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull ownId;
/// A map of remote peers that we can interact with. Only peers we have an active connection to and who have mounted
/// a compatible component to the same point will be visible in this collection.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, RtcPeer *> * _Nonnull peers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// A base class that all pure media nodes inherit from.
/// Classes inheriting from media node are plain nodes with input and output ports directly attached.
/// A media node has zero or more input and output ports, which can be connected to other nodes. Media nodes are always
/// connected from one output port to one input port, using the connect method of either the output port or the media
/// node.
/// When using the connect method of a media node, the output port to be used is resolved by recursively looking up the
/// output property of the media node. The same method is used when a media node is used as the target for a connection,
/// but in that case an input port is looked up via the input property.
/// Because the input and output property lookups are recursive, it is easy to create simple container nodes that have a
/// number of internal media nodes, and then expose input and output ports as properties.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct9MediaNode")
@interface MediaNode : EventEmitter
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// Connect the node to a target. Each output can be connected to multiple targets.
/// version:
/// 1.0.0
/// \param target The target input, node, or element.
///
- (void)connectTo:(id _Nonnull)target;
/// Disconnect the node from a target.
/// If no target is specified, all targets will be disconnected.
/// version:
/// 1.0.0
/// \param target The target to disconnect from.
///
- (void)disconnectFrom:(id _Nullable)target;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class MediaNodeInput;
@class MediaNodeOutput;
@class RtcMediaStream;

/// A base class for media nodes with a single input and a single output.
/// The subclass should override the <code>MediaFilter.onStream(_:_:)</code> method, and assign to <code>MediaFilter.stream</code> to update
/// the output stream.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct11MediaFilter")
@interface MediaFilter : MediaNode
/// The input of the filter.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) MediaNodeInput * _Nonnull input;
/// The output of the filter.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) MediaNodeOutput * _Nonnull output;
/// The current output stream.
/// This should only be called by the subclass implementation, and not from outside the media node.
/// version:
/// 1.0.0
@property (nonatomic, strong) RtcMediaStream * _Nullable stream;
/// Creates an instance of media filter.
/// version:
/// 1.0.0
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// Abstract method that is called whenever the input stream is updated, this should be overridden by the subclass.
/// This will only ever be called if the stream has changed, been added, or removed, i.e. <code>stream</code> and <code>oldStream</code>
/// will never be equal.
/// The <code>MediaFilter.onStream(_:_:)</code> method will not be called when the backing tracks of a stream is changed. If
/// the subclass needs to be notified of track updates this has to be done manually using the media stream
/// listeners.
/// version:
/// 1.0.0
/// \param stream The new media stream, or nil.
///
/// \param oldStream The old media stream, or nil.
///
- (void)onStream:(RtcMediaStream * _Nullable)stream :(RtcMediaStream * _Nullable)oldStream;
- (void)close;
@end


/// A utility for measuring the audio level of a <code>MediaSource</code>.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <code>filtered</code>: Emitted when the filtered audio level has changed.
/// <code>raw</code>: Emitted when the raw audio level has changed.
/// <h4>Example</h4>
/// Example of using the <code>AudioMeter</code>
/// \code
/// let microphone = DeviceSource(audio:true, video: false)
/// let meter = AudioMeter()
///
/// microphone.connect(to: meter)
/// meter.on("filtered", target: self, callback: #selector(onFiltered(_:))
///
/// ...
///
/// @objc func onFiltered(_ value: NSNumber) {
///     // NOTE: This event will be emitted VERY frequently!
///     // Consider reading meter.filtered or meter.raw instead.
/// }
///
/// \endcode
SWIFT_CLASS("_TtC3cct10AudioMeter")
@interface AudioMeter : MediaFilter
/// The raw audio level.
/// version:
/// 1.0.0
@property (nonatomic, readonly) double raw;
/// The filtered audio level. This represents the “average” audio level over a period of time, filtering out sudden
/// changes and spikes.
/// version:
/// 1.0.0
@property (nonatomic, readonly) double filtered;
/// Creates an instance of audio filter.
/// version:
/// 1.0.0
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (void)onStream:(RtcMediaStream * _Nullable)stream :(RtcMediaStream * _Nullable)oldStream;
@end



@class AuthInfo;

/// Represents a step in an authentication flow. Currently all authentication flows only use a single step, so this class
/// is used as a namespace for static authentication functions.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct4Auth")
@interface Auth : NSObject
/// Register a new account with a generated username. This should primarily be used for testing.
/// A password can optionally be added to the account.
/// <h4>Errors</h4>
/// <ul>
///   <li>
///     <code>AuthenticationError</code>: The provided secret was incorrect.
///   </li>
///   <li>
///     <code>NotAllowedError</code>: No secret was provided but the server requires one.
///   </li>
/// </ul>
/// version:
/// 1.0.0
/// \param password The password to use for the account.
///
/// \param serverUrl The absolute url of the home server.
///
/// \param success The callback to be executed upon successful login. Receives authentication info. Can be
/// nil.
///
/// \param failure The callback to be executed upon failed login. Receives failure cause.
///
+ (void)anonymousWithPassword:(NSString * _Nonnull)password serverUrl:(NSString * _Nonnull)serverUrl success:(void (^ _Nullable)(AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Authenticate as a guest user with a generated user id. Guest accounts are limited to a subset of the
/// functionality of full accounts.
/// At the moment guests are only allowed to join rooms where <code>Room.guestAccess</code> has been set to
/// <code>GuestAccessRule.open</code>. They are not allowed to modify the state of a room, but can send messages and setup
/// calls.
/// Guests are also not able to set their avatar or status, but they can set their display name.
/// version:
/// 1.0.0
/// \param serverUrl The absolute url of the home server.
///
/// \param success The callback to be executed upon successful login. Receives authentication info. Can be
/// nil.
///
/// \param failure The callback to be executed upon failed login. Receives failure cause.
///
+ (void)guestWithServerUrl:(NSString * _Nonnull)serverUrl success:(void (^ _Nullable)(AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Login a user using username and password.
/// version:
/// 1.0.0
/// \param username The username.
///
/// \param password The password.
///
/// \param serverUrl The absolute url of the home server.
///
/// \param success The callback to be executed upon successful login. Receives authentication info.
///
/// \param failure The callback to be executed upon failed login. Receives failure cause.
///
+ (void)loginAs:(NSString * _Nonnull)username password:(NSString * _Nonnull)password serverUrl:(NSString * _Nonnull)serverUrl success:(void (^ _Nullable)(AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Register a new user.
/// A registration secret should be used iff the server is configured to only allow registration using a secret
/// token. The secret token is used to compute an HMAC and is not sent to the server.
/// version:
/// 1.0.0
/// \param username The username.
///
/// \param password The password.
///
/// \param secret Shared registration secret.
///
/// \param serverUrl The absolute url of the home server.
///
/// \param success The callback to be executed upon successful registration. Receives authentication info.
///
/// \param failure The callback to be executed upon failed registration. Receives failure cause.
///
+ (void)registerAs:(NSString * _Nonnull)username password:(NSString * _Nonnull)password secret:(NSString * _Nullable)secret serverUrl:(NSString * _Nonnull)serverUrl success:(void (^ _Nullable)(AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Set a new password using an existing login session and the old password.
/// version:
/// 1.0.0
/// \param authInfo Auth info object.
///
/// \param oldPassword Old password.
///
/// \param newPassword New password.
///
/// \param success The callback to be executed upon successful reset. Receives authentication info.
///
/// \param failure The callback to be executed upon failed reset. Receives failure cause.
///
+ (void)resetPasswordFor:(AuthInfo * _Nonnull)authInfo oldPassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword success:(void (^ _Nullable)(AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object containing the necessary information to connect and authenticate to a server.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct8AuthInfo")
@interface AuthInfo : NSObject
/// Deserializes auth info object from its JSON representation.
/// version:
/// 1.0.0
/// \param json JSON representation to deserialize from.
///
///
/// returns:
/// Deserialized object or nil if if was deserialization failed.
+ (AuthInfo * _Nullable)fromRaw:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// Serializes auth info object to its JSON representation.
/// version:
/// 1.0.0
///
/// returns:
/// JSON representation of the auth info object.
- (NSDictionary<NSString *, id> * _Nonnull)toRaw SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Base class for all custom errors in the library.
/// The main purpose of this class is to provide a cross-browser way to subclass errors and have proper stack traces.
/// It is safe to subclass this error in a babel environment, as opposed to subclassing the <code>Error</code> builtin.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct7C3Error")
@interface C3Error : NSObject
/// The reason the interruption happened.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Authentication failed, or authentication is required to perform the action.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct19AuthenticationError")
@interface AuthenticationError : C3Error
@end


/// The request was malformed. This error shouldn’t be encountered since input is validated on the client-side.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct15BadRequestError")
@interface BadRequestError : C3Error
@end


SWIFT_CLASS("_TtC3cct4Blob")
@interface Blob : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




enum LogLevel : NSInteger;

SWIFT_CLASS("_TtC3cct5C3Log")
@interface C3Log : NSObject
@property (nonatomic) enum LogLevel logLevel;
@property (nonatomic) BOOL isTimeIncluded;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)error:(NSString * _Nonnull)message file:(NSString * _Nonnull)file;
- (void)warning:(NSString * _Nonnull)message file:(NSString * _Nonnull)file;
- (void)info:(NSString * _Nonnull)message file:(NSString * _Nonnull)file;
- (void)debug:(NSString * _Nonnull)message file:(NSString * _Nonnull)file;
- (void)verbose:(NSString * _Nonnull)message file:(NSString * _Nonnull)file;
@end

@class RtcComponent;
enum ConnectionState : NSInteger;
@class User;
@class Room;
@class MediaTee;

SWIFT_CLASS("_TtC3cct4Call")
@interface Call : EventEmitter
@property (nonatomic, readonly, copy) NSDictionary<NSString *, RtcComponent *> * _Nonnull attachments;
@property (nonatomic, readonly) enum ConnectionState connectionState;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) BOOL isClosed;
@property (nonatomic, readonly) BOOL isConnected;
@property (nonatomic, readonly) BOOL isStopped;
@property (nonatomic, readonly, strong) User * _Nullable peer;
@property (nonatomic, readonly, strong) Room * _Nonnull room;
- (void)attach:(RtcComponent * _Nonnull)component as:(NSString * _Nonnull)name;
- (void)close;
- (void)detach:(RtcComponent * _Nonnull)component from:(NSString * _Nonnull)name;
- (void)hangup;
- (MediaTee * _Nonnull)remoteSource:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)setLocalSource:(MediaNode * _Nonnull)source as:(NSString * _Nonnull)name;
- (void)start;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end





typedef SWIFT_ENUM(NSInteger, CameraPosition) {
/// Use front facing camera.
/// version:
/// 1.0.0
  CameraPositionFront = 0,
/// Use back facing camera.
/// version:
/// 1.0.0
  CameraPositionBack = 1,
/// Device doesn’t have a camera.
/// version:
/// 1.0.0
  CameraPositionNone = 2,
};


SWIFT_CLASS("_TtC3cct18ChannelClosedError")
@interface ChannelClosedError : C3Error
@end

enum ClientConnectionState : NSInteger;
@class IceServer;
enum RoomVisibility : NSInteger;
@class RoomQuery;
enum ImageResizeMethod : NSInteger;
enum UserPresence : NSInteger;
@class ImageResource;
@class ImageUpload;

/// Represents a client.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>event</code>:        Emitted when an event is received in any room. Receives <code>Event</code> instance.
///   </li>
///   <li>
///     <code>event:<type></code>: Same as <code>event</code>, but listens to a specific event type.
///   </li>
///   <li>
///     <code>call</code>:         Emitted when there is an incoming call to any room. Incoming calls are stopped and need to be
///     started with call’s <code>start()</code> before a connection is set up. Receives <code>Call</code> instance.
///   </li>
///   <li>
///     <code>invite</code>:       Emitted when a new room invite is received. The room will contain additional information, such as
///     <code>invitedBy</code>. Receives <code>Room</code> instance.
///   </li>
///   <li>
///     <code>rooms</code>:        Emitted whenever the list of rooms changes.
///   </li>
///   <li>
///     <code>state</code>:        Emitted when the connection state of the client is changed.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct6Client")
@interface Client : EventEmitter
/// The authenticated user.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) User * _Nullable user;
/// All rooms the authenticated user is a member of.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<Room *> * _Nonnull rooms;
/// The authentication information for the authenticated user.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) AuthInfo * _Nullable authInfo;
/// The state of the client.
/// version:
/// 1.0.0
@property (nonatomic, readonly) enum ClientConnectionState state;
/// Account data object that is used to access user scoped account data.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) AccountData * _Nullable accountData;
/// Creates an instance of client.
/// version:
/// 1.0.0
///
/// returns:
/// Initialized client instance.
- (nonnull instancetype)init;
/// Creates an instance of client.
/// version:
/// 1.0.0
/// \param iceServerUrls One or more helper servers to use as default for all calls.
///
///
/// returns:
/// Initialized client instance.
- (nonnull instancetype)initWithIceServerUrls:(NSArray<NSString *> * _Nonnull)iceServerUrls;
/// Creates an instance of client.
/// version:
/// 1.0.0
/// \param iceServers One or more helper servers to use as default for all calls.
///
///
/// returns:
/// Initialized client instance.
- (nonnull instancetype)initWithIceServers:(NSArray<IceServer *> * _Nonnull)iceServers OBJC_DESIGNATED_INITIALIZER;
/// Authenticates the client using authentication information that has been obtained in some way, usually using
/// <code>Auth</code>.
/// version:
/// 1.0.0
/// \param success The callback to be executed upon successful authentication. Receives authenticated client
/// instance.
///
/// \param failure The callback to be executed upon failed authentication. Receives failure cause.
///
- (void)auth:(AuthInfo * _Nonnull)authInfo success:(void (^ _Nullable)(Client * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Get a user by id.
/// If the user information is not available locally, this method will return nil.
/// This method can be used without being authenticated.
/// version:
/// 1.0.0
/// \param id The id of the user to retrieve.
///
///
/// returns:
/// The user, or nil if the user information is not available locally of the user doesn’t exist.
- (User * _Nullable)userWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Get a user by id.
/// This method will always result in a request to the server, regardless of what information is already available.
/// The request fetches the current name and avatar of the user.
/// If the user does not exist on the server, the returned promise will be rejected.
/// This method can be used without being authenticated.
/// version:
/// 1.0.0
/// \param id The id of the user to fetch.
///
///
/// returns:
/// The user, or nil if the user doesn’t exist.
- (void)fetchUserWithId:(NSString * _Nonnull)id success:(void (^ _Nullable)(User * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Create a new room.
/// <h4>Example</h4>
/// \code
/// client.createRoom(success: { room in
///     print("Created room: \(room)")
/// })
///
/// \endcode<h4>Example</h4>
/// \code
/// let bob: User = ...
///
/// client.createRoom(
///     type: "meeting",
///     name: "Meeting with Bob",
///     topic: "Widget production schedule",
///     invite: [bob],
///     success: { room in
///         print("Created meeting with Bob: \(room)")
///     }, failure: { error in
///         print("Failed to create meeting with Bob: \(error)")
///     }
/// })
///
/// - version: 1.0.0
///
/// \endcode\param name The display name of the room.
///
/// \param alias A local alias for the room id.
///
/// \param topic The topic to display for the room.
///
/// \param visibility Room visibility.
///
/// \param invite Optional list of users to invite to the room.
///
/// \param success The callback to be executed upon successful creation. Receives new room instance.
///
/// \param failure The callback to be executed upon failed creation. Receives failure cause.
///
- (void)createRoomWithName:(NSString * _Nullable)name alias:(NSString * _Nullable)alias topic:(NSString * _Nullable)topic visibility:(enum RoomVisibility)visibility invite:(NSArray<User *> * _Nonnull)users success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Create a room query.
/// version:
/// 1.0.0
/// \param mapFunction The map function of the room query, see <code>RoomQuery</code>.
///
///
/// returns:
/// A newly created room query.
- (RoomQuery * _Nonnull)createRoomQueryWithMapFunction:(id _Nullable (^ _Nonnull)(Room * _Nonnull))mapFunction SWIFT_WARN_UNUSED_RESULT;
/// Get a room by id.
/// This method always returns a room, but the room might be private or nonexistent, in which case any attempt to
/// join the room will fail.
/// version:
/// 1.0.0
/// \param id The id of the room.
///
///
/// returns:
/// The room, or nil if the room doesn’t exist.
- (Room * _Nullable)roomWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Retrieve a room by id, and fail if it doesn’t exist.
/// If one can be certain that the room id points to a valid room, it is usually better to use
/// <code>Client.room(withId:)</code> instead. This method should be used if the room id is received e.g. via user input, and
/// it’s required to check if the room exists before trying to join it.
/// version:
/// 1.0.0
/// \param id The id of the room.
///
/// \param success The callback to be executed upon successful fetch. Receives room instance.
///
/// \param failure The callback to be executed upon failed fetch. Receives failure cause.
///
- (void)fetchRoomWithId:(NSString * _Nonnull)id success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Look up and retrieve a room by alias.
/// version:
/// 1.0.0
/// \param alias he alias of the room.
///
/// \param success The callback to be executed upon successful fetch. Receives room instance.
///
/// \param failure The callback to be executed upon failed fetch. Receives failure cause.
///
- (void)fetchRoomWithAlias:(NSString * _Nonnull)alias success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Parses a mxc resource URI.
/// version:
/// 1.0.0
/// \param uri The mxc resource URI to parse.
///
///
/// returns:
/// Parsed URL string.
- (NSString * _Nonnull)parseResourceUri:(NSString * _Nonnull)uri SWIFT_WARN_UNUSED_RESULT;
/// Generates a thumbnail uri for the image resource.
/// version:
/// 1.0.0
/// \param resourceUri The resource uri to generate a thumbnail for.
///
/// \param width The request width of the thumbnail.
///
/// \param height The request height of the thumbnail.
///
/// \param resizeMethod The method used for resizing the image.
///
///
/// returns:
/// Thumbnail url or nil if the client this image resource is associated with has been closed.
- (NSString * _Nullable)thumbnailOf:(NSString * _Nonnull)resourceUri width:(float)width height:(float)height resizeMethod:(enum ImageResizeMethod)resizeMethod SWIFT_WARN_UNUSED_RESULT;
/// Set the avatar of the authenticated user.
/// Typical usage is to first upload an image file using <code>Client.uploadMedia(_:ofType:success:failure:)</code>, and then
/// setting it as the avatar.
/// There is no guarantee that client.user.avatar will be up to date if and when the returned promise is resolved.
/// UI updates to reflect the new avatar should instead be triggered by the <code>avatar</code> event of the user.
/// version:
/// 1.0.0
/// \param avatar A new avatar url, or nil.
///
/// \param success The callback to be executed upon successful set. Receives client instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setAvatar:(NSString * _Nullable)avatar success:(void (^ _Nullable)(Client * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Set the name of the authenticated user.
/// There is no guarantee that client.user.name will be up to date if and when the returned promise is resolved. UI
/// updates to reflect the new name should instead be triggered by the <code>name</code> event of the user.
/// version:
/// 1.0.0
/// \param name A new name, or nil.
///
/// \param success The callback to be executed upon successful set. Receives client instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setName:(NSString * _Nonnull)name success:(void (^ _Nullable)(Client * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets the status of the authenticated user.
/// version:
/// 1.0.0
/// \param status The presence type to set.
///
/// \param message A status message to display to other users.
///
/// \param success The callback to be executed upon successful set. Receives client instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setStatus:(enum UserPresence)status statusMessage:(NSString * _Nullable)statusMessage success:(void (^ _Nullable)(Client * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Uploads media data to the server.
/// If a mime type is specified it will always be used. If not, it falls back to <code>application/octet-stream</code>.
/// version:
/// 1.0.0
/// \param data The data to upload.
///
/// \param mimeType Mime type of the data to upload.
///
/// \param success The callback to be executed upon successful upload. Receives image resource representation
/// of the uploaded media.
///
/// \param failure The callback to be executed upon failed upload. Receives failure cause.
///
///
/// returns:
/// Image media upload representation.
- (ImageUpload * _Nullable)uploadMedia:(NSData * _Nonnull)data ofType:(NSString * _Nonnull)mimeType success:(void (^ _Nullable)(ImageResource * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure SWIFT_WARN_UNUSED_RESULT;
/// Forgets the auth session and resets the client state.
/// version:
/// 1.0.0
- (void)logout;
@end



/// The connection state of the client.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, ClientConnectionState) {
/// version:
/// 1.0.0
  ClientConnectionStateInactive = 0,
/// The client is connecting.
/// version:
/// 1.0.0
  ClientConnectionStateConnecting = 1,
/// The client is connected.
/// version:
/// 1.0.0
  ClientConnectionStateConnected = 2,
/// The client is disconnected.
/// version:
/// 1.0.0
  ClientConnectionStateDisconnected = 3,
};

@class ConferencePeers;
@class ConferenceSwitcher;
enum ConferenceSwitcherMode : NSInteger;

SWIFT_CLASS("_TtC3cct10Conference")
@interface Conference : EventEmitter
@property (nonatomic, readonly, strong) ConferencePeers * _Nullable peers;
@property (nonatomic, readonly, strong) ConferenceSwitcher * _Nullable switcher;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) BOOL isClosed;
- (void)attach:(RtcComponent * _Nonnull)component as:(NSString * _Nonnull)name;
- (void)close;
- (void)detach:(RtcComponent * _Nonnull)component from:(NSString * _Nonnull)name;
- (void)startWithSwitcherMode:(enum ConferenceSwitcherMode)switcherMode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end






/// A class representing the state of a single conference peer.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct14ConferencePeer")
@interface ConferencePeer : EventEmitter
/// The id of the peer.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The connection state of the peer.
/// version:
/// 1.0.0
@property (nonatomic, readonly) enum ConnectionState connectionState;
/// The error state of the peer. This will be nil if there is no current problem with the call.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) C3Error * _Nullable errorState;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




SWIFT_CLASS("_TtC3cct15ConferencePeers")
@interface ConferencePeers : EventEmitter
/// The number of entries in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger size;
/// Returns all the keys in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
- (void)close;
/// Returns the conference peer for the given peer id.
/// version:
/// 1.0.0
/// \param peerId The id of the conference peer to retrive.
///
///
/// returns:
/// The conference peer for the given key or nil if the peer id does not exist.
- (ConferencePeer * _Nullable)get:(NSString * _Nonnull)peerId SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an entry for the given peer id.
/// version:
/// 1.0.0
/// \param peerId The peer id to look for.
///
///
/// returns:
/// True if there is a conference peer for the given id.
- (BOOL)has:(NSString * _Nonnull)peerId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end





@class Passthrough;

SWIFT_CLASS("_TtC3cct18ConferenceSwitcher")
@interface ConferenceSwitcher : MediaNode
@property (nonatomic, readonly, strong) Passthrough * _Nonnull input;
@property (nonatomic, readonly) enum ConferenceSwitcherMode mode;
@property (nonatomic, readonly, strong) Passthrough * _Nonnull output;
@property (nonatomic, readonly, copy) NSString * _Nullable primarySpeaker;
@property (nonatomic, readonly, copy) NSString * _Nullable secondarySpeaker;
@property (nonatomic, readonly, copy) NSString * _Nullable selectedPrimarySpeaker;
@property (nonatomic, readonly, copy) NSString * _Nullable selectedSecondarySpeaker;
@property (nonatomic, readonly, copy) NSString * _Nullable speaker;
- (void)close;
- (void)requestWithMode:(enum ConferenceSwitcherMode)mode;
- (void)requestWithPrimarySpeaker:(NSString * _Nonnull)userId;
- (void)requestWithSecondarySpeaker:(NSString * _Nonnull)userId;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
@end





typedef SWIFT_ENUM(NSInteger, ConferenceSwitcherMode) {
  ConferenceSwitcherModeOff = 0,
  ConferenceSwitcherModeManual = 1,
  ConferenceSwitcherModeManualFollow = 2,
  ConferenceSwitcherModeManualAutomatic = 3,
  ConferenceSwitcherModeAutomatic = 4,
};


/// The requested action would result in a conflict, such as trying to create a room with an alias that already exists,
/// or registering a user with an existing username.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct13ConflictError")
@interface ConflictError : C3Error
@end


/// An error that represents a failure to set up a connection. As opposed to the <code>ConnectionLostError</code>, this error
/// almost always happens when trying to create a new connection.
/// Attempts will be made to set up a new connection, so the <code>ConnectionLostError.times</code> property is exposed in order to
/// make it easier for applications to decide when to give up.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct21ConnectionFailedError")
@interface ConnectionFailedError : C3Error
@property (nonatomic, readonly) NSInteger times;
- (nonnull instancetype)initWithTimes:(NSInteger)times OBJC_DESIGNATED_INITIALIZER;
@end


/// An error that indicates that a connection that was set up successfully has now been disconnected.
/// An attempt will be made to restore the connection, but if that attempt fails this error will be replaced with a
/// <code>ConnectionFailedError</code>.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct19ConnectionLostError")
@interface ConnectionLostError : C3Error
@end


/// An error that is represents a signaling failure. This error almost always indicates that there is an incompatability
/// between the endpoints that are being connected, or that the particular way that the connection is being set up is
/// not supported.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct24ConnectionSignalingError")
@interface ConnectionSignalingError : C3Error
@end

/// The connection state of the call.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, ConnectionState) {
/// The connection is in the signaling state, e.i. waiting for offer or answer.
/// version:
/// 1.0.0
  ConnectionStateSignaling = 0,
/// The signaling has been completed and the connection is being set up.
/// version:
/// 1.0.0
  ConnectionStateConnecting = 1,
/// Connected to the peer.
/// version:
/// 1.0.0
  ConnectionStateConnected = 2,
/// The connection has been temporarily lost but might recover.
/// version:
/// 1.0.0
  ConnectionStateReconnecting = 3,
/// The container of the connection has been closed, i.e. the conference, call, etc.
/// version:
/// 1.0.0
  ConnectionStateClosed = 4,
};

typedef SWIFT_ENUM(NSInteger, ContentMode) {
  ContentModeAspectFill = 0,
  ContentModeScaleToFill = 1,
};

enum ReadyState : NSInteger;

SWIFT_CLASS("_TtC3cct11DataChannel")
@interface DataChannel : EventEmitter
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly, copy) NSString * _Nonnull protocol;
@property (nonatomic, readonly) enum ReadyState readyState;
- (void)close;
- (void)send:(id _Nonnull)data success:(void (^ _Nullable)(DataChannel * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



@class DataUpdate;

/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct12RtcComponent")
@interface RtcComponent : EventEmitter
/// The label that remote components will be matched against. Only components with matching labels can interact with
/// each other.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// The expected remote component label, defaults to the own label.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable remoteLabel;
/// Returns the current attachment point. This should only be accessed from within the component implementation.
/// Will be nil if you try to access this member when the component is not attached.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) AttachPoint * _Nullable attachPoint;
/// Creates an instance of component.
/// version:
/// 1.0.0
/// \param label The label that remote components will be matched against. Only components with matching
/// labels can interact with each other.
///
/// \param remoteLabel The expected remote component label, defaults to the own label.
///
///
/// returns:
/// Initialized component instance.
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel OBJC_DESIGNATED_INITIALIZER;
/// This method is called whenever a peer is added to the <code>AttachPoint.peers</code> collection of the attach point.
/// Only peers to who we have an active connection and who have mounted a matching component will be visible.
/// This method will always be followed by a call to <code>RtcComponent.lostPeer(_:)</code> for the given peer. It will also
/// only ever be called while the component is attached.
/// version:
/// 1.0.0
/// \param peer The added peer.
///
- (void)receivedPeer:(RtcPeer * _Nonnull)peer;
/// This method is called whenever a peer is removed from the <code>AttachPoint.peers</code> collection of the attach point.
/// This will happen when the connection to a peer is lost, the peer detaches their component, or when the local
/// component is detached.
/// This method will always preceeded by a call to <code>RtcComponent.receivedPeer(_:)</code> for the given peer. It will also
/// only ever be called while the component is attached.
/// version:
/// 1.0.0
/// \param peer The peer that was lost.
///
- (void)lostPeer:(RtcPeer * _Nonnull)peer;
/// This method is called whenever a peer opens a data channel. The channel will be ready to use as soon as this
/// method is called.
/// When this method is called the channel will already have been added to the collection returned by
/// <code>RtcPeer.remoteChannels</code> property.
/// This method will only be called for active peers, which means that it is always happens after the
/// <code>RtcComponent.receivedPeer(_:)</code> call for a peer, and before <code>RtcComponent.lostPeer(_:)</code>. It will also only ever
/// be called while the component is attached.
/// version:
/// 1.0.0
/// \param channel The opened data channel.
///
/// \param peer The peer that created the channel.
///
- (void)receivedChannel:(DataChannel * _Nonnull)channel peer:(RtcPeer * _Nonnull)peer;
/// A overridable method that is called when the component is about to be attached to something. When this method is
/// called, <code>RtcComponent.attachPoint</code> will not yet have been set, but the attachment point can be accessed through
/// the parameter.
/// If this method throws an error, the component will fail to attach. The error will be caught and handled by
/// logging an error, but the program flow will continue.
/// This method will always the followed by a call to <code>RtcComponent.willDetach()</code>.
/// version:
/// 1.0.0
/// \param attachPoint The point that the component will be attached to.
///
- (void)willAttach:(AttachPoint * _Nonnull)attachPoint;
/// Called before the component is detached. Once this method has returned the attachPoint will no longer be valid,
/// and any attempt to call a method on the attach point will throw an error.
/// This method will always the preceeded by a call to <code>RtcComponent.willAttach(_:)</code>.
/// version:
/// 1.0.0
- (void)willDetach;
/// This method is called whenever an update to this component’s data occurs.
/// This method will only be called for active peers, which means that it is always happens after the
/// <code>RtcComponent.receivedPeer(_:)</code> call for a peer, and before <code>RtcComponent.lostPeer(_:)</code>. It will also only ever
/// be called while the component is attached.
/// version:
/// 1.0.0
/// \param update The received update.
///
- (void)receivedDataUpdate:(DataUpdate * _Nonnull)update;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A component that allows data to be synchronized between all peers.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>update</code>:       Emitted whenever any entry in the map is added, changed, or removed. Events are emitted for both
///     local and remote updates. Receives <code>DataUpdate</code> instance.
///   </li>
///   <li>
///     <code>update:<key></code>: Emitted whenever a specific entry in the map is added, changed, or removed. Receives <code>DataUpdate</code>
///     instance. Events are emitted for both local and remote updates. The <code><key></code> part of the event name
///     should be replaced with the key you want to listen for, i.e. to listen for the entry for
///     <code>position</code> to change, you should listen to the <code>update:position</code> event.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct9DataShare")
@interface DataShare : RtcComponent
/// The number of entries in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger size;
/// Returns all the keys in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/// Creates an intance of data share.
/// version:
/// 1.0.0
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Clears all entries from the map.
/// Clearing the map locally will cause an update event to be emitted for every entry. The update event does not get
/// emitted synchronously, but is instead scheduled in a microtask.
/// version:
/// 1.0.0
- (void)clear;
/// Deletes the entry for a given key.
/// Deleting a local entry will cause an update event to be emitted for that key. The update event does not get
/// emitted synchronously, but is instead scheduled in a microtask.
/// version:
/// 1.0.0
/// \param key The key of the entry to delete.
///
- (void)delete:(NSString * _Nonnull)key;
/// Returns the value for the given key.
/// version:
/// 1.0.0
/// \param key The key of the value to retrive.
///
///
/// returns:
/// The value for the given key or nil if the key does not exist.
- (id _Nullable)get:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an entry for the given key.
/// version:
/// 1.0.0
/// \param key The key to look for.
///
///
/// returns:
/// True if there is an entry for the given key.
- (BOOL)has:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Sets set value for the given key.
/// Setting a local value will cause an update event to be emitted for that key. The update event does not get
/// emitted synchronously, but is instead scheduled in a microtask.
/// version:
/// 1.0.0
/// \param value The value to set.
///
/// \param key The key of the value.
///
- (void)set:(id _Nonnull)value for:(NSString * _Nonnull)key;
- (void)receivedDataUpdate:(DataUpdate * _Nonnull)update;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel SWIFT_UNAVAILABLE;
@end


/// The data update emitted as event payload.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct10DataUpdate")
@interface DataUpdate : NSObject
/// The key whose value was changed.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSString * _Nullable ownerId;
/// The new value that the key is now associated with.
/// version:
/// 1.0.0
@property (nonatomic, readonly) id _Nullable value;
/// The value that the key was previously associated with, if any.
/// version:
/// 1.0.0
@property (nonatomic, readonly) id _Nullable oldValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class MediaConstraints;

/// A media source that streams from user media devices.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>error</code>:  Emitted if a stream could not be acquired. Receives <code>Error</code> instance. The node will only ever emit one
///     of the <code>stream</code> and <code>error</code> events, and only once.
///   </li>
///   <li>
///     <code>stream</code>: Emitted when the stream has been acquired. Receives <code>RtcMediaStream</code> instance. The node will only ever
///     emit one of the <code>stream</code> and <code>error</code> events, and only once.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct12DeviceSource")
@interface DeviceSource : MediaNode
/// Toggles muting of the audio.
/// version:
/// 1.0.0
@property (nonatomic) BOOL muteAudio;
/// Toggles muting of the video.
/// version:
/// 1.0.0
@property (nonatomic) BOOL muteVideo;
/// Toggles muting of the media.
/// When assigning to the property, both audio and video will be updated.
/// version:
/// 1.0.0
/// <h4>Example</h4>
/// \code
/// let source = DeviceSource()
///
/// // both at once
/// source.mute = true
///
/// // directly
/// source.muteVideo = true
///
/// \endcode
@property (nonatomic) BOOL mute;
/// Selects the camera position.
/// version:
/// 1.0.0
@property (nonatomic) enum CameraPosition cameraPosition;
/// Creates an instance of device source.
/// version:
/// 1.0.0
/// \param audio Set to <code>true</code> if audio is desired.
///
/// \param video Set to <code>true</code> if video is desired.
///
/// \param constraints Dictionary of media constraints to be applied to the video stream.
///
///
/// returns:
/// Initialized device source instance.
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name audio:(BOOL)audio video:(BOOL)video constraints:(MediaConstraints * _Nullable)constraints OBJC_DESIGNATED_INITIALIZER;
- (void)close;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
@end



/// Enumeration identifying the reason the download ended.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, EndReason) {
/// The download finished successfully.
/// version:
/// 1.0.0
  EndReasonDone = 0,
/// The download finished with an error.
/// version:
/// 1.0.0
  EndReasonError = 1,
/// The downlaod has been aborted, either by user by calling <code>abort()</code> method or by logging out.
/// version:
/// 1.0.0
  EndReasonAborted = 2,
/// The file has been closed.
/// version:
/// 1.0.0
  EndReasonClosed = 3,
};


/// The event generated in the room.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct5Event")
@interface Event : NSObject
/// The room to which the event belongs.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) Room * _Nonnull room;
/// The user who triggered the event.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) User * _Nonnull sender;
/// The id of the event.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The content of the event.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull content;
/// The old content of the event, if any.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable oldContent;
/// The type of the event.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// True if the event has been generated by the currently logged in user, false otherwise.
/// version:
/// 1.0.0
@property (nonatomic, readonly) BOOL isOwnEvent;
/// The timestamp indicating the date the event has been generated.
@property (nonatomic, readonly) NSTimeInterval timeInterval;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end






enum MessageType : NSInteger;

SWIFT_CLASS("_TtC3cct7Message")
@interface Message : NSObject
@property (nonatomic, readonly) enum MessageType type;
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
+ (Message * _Nullable)fromEvent:(Event * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSString * _Nonnull)body type:(enum MessageType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC3cct12MediaMessage")
@interface MediaMessage : Message
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)init:(NSString * _Nonnull)url body:(NSString * _Nullable)body type:(enum MessageType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)body type:(enum MessageType)type SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC3cct11FileMessage")
@interface FileMessage : MediaMessage
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull info;
- (nonnull instancetype)init:(NSString * _Nonnull)url body:(NSString * _Nullable)body info:(NSDictionary<NSString *, id> * _Nonnull)info OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)url body:(NSString * _Nullable)body type:(enum MessageType)type SWIFT_UNAVAILABLE;
@end

@class FileTransfer;

/// Represents a reference to a file, which resides either locally, or at some remote peer.
/// If the file is available locally it can be accessed directly, otherwise it has to be downloaded first.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>end</code>:       Emitted when the file download ends, both on success and failure. Receives <code>EndReason</code> instance.
///   </li>
///   <li>
///     <code>error</code>:     Emitted when the file download ends before it is completed. Receives <code>C3Error</code> instance.
///   </li>
///   <li>
///     <code>load</code>:      Emitted when the file download is completed successfully. Receives <code>FileRef</code> instance.
///   </li>
///   <li>
///     <code>progress</code>:  Emitted each time the progress of the file download changes. Receives <code>Float</code> instance.
///   </li>
///   <li>
///     <code>transfer</code>:  Emitted each time a remote peer starts downloading the file. Receives <code>FileTransfer</code> instance.
///   </li>
///   <li>
///     <code>transfers</code>: Emitted when the list of file transfers is changes. Receives <code>[FileTransfer]</code> instance.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct7FileRef")
@interface FileRef : EventEmitter
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// True if the file reference points to a local file, false otherwise.
/// version:
/// 1.0.0
@property (nonatomic, readonly) BOOL isLocal;
/// The name of the file.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The peer that shared the file, or nil if the file is local.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) RtcPeer * _Nullable peer;
/// The progress of the file download in the range [0, 1].
/// version:
/// 1.0.0
@property (nonatomic, readonly) double progress;
/// The size of the file in bytes.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger size;
@property (nonatomic, readonly, copy) NSArray<FileTransfer *> * _Nonnull transfers;
/// The mime type of the file.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Aborts any ongoing file download. Has no effect if the file download is complete or hasn’t started.
/// version:
/// 1.0.0
- (void)abort;
/// Downloads the file from a remote peer. If the file has already been downloaded or the reference points to a
/// local file, the returned promise will be immediately resolved.
/// version:
/// 1.0.0
/// \param success The callback to be executed upon successful fetch. Receives fetched file reference
/// instance.
///
/// \param failure The callback to be executed upon failed fetch. Receives failure cause.
///
- (void)fetchWithSuccess:(void (^ _Nullable)(FileRef * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Creates a new file reference from a path.
/// version:
/// 1.0.0
/// \param path The path of a file for which to create a reference.
///
/// \param type The type of the file.
///
///
/// returns:
/// A new file ref or nil if the file was not available.
+ (FileRef * _Nullable)fromPath:(NSString * _Nonnull)path type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Creates a new file reference from data.
/// version:
/// 1.0.0
/// \param data The data of a file for which to create a reference.
///
/// \param name The name of the file.
///
/// \param type The type of the file.
///
///
/// returns:
/// A new file ref.
+ (FileRef * _Nonnull)fromData:(NSData * _Nonnull)data name:(NSString * _Nonnull)name type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end






/// A component that allows file sharing between peers.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>update</code>:       Emitted whenever any entry in the map is added, changed, or removed. Events are emitted for both
///     local and remote updates. Receives <code>DataUpdate</code> instance.
///   </li>
///   <li>
///     <code>update:<key></code>: Emitted whenever a specific entry in the map is added, changed, or removed. Receives <code>DataUpdate</code>
///     instance. Events are emitted for both local and remote updates. The <code><key></code> part of the event name
///     should be replaced with the key you want to listen for, i.e. to listen for the entry for
///     <code>position</code> to change, you should listen to the <code>update:position</code> event.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct9FileShare")
@interface FileShare : RtcComponent
/// All the keys in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/// The number of entries in the map.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger size;
/// Creates an intance of file share.
/// version:
/// 1.0.0
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Clears all entries from the map.
/// Clearing the map locally will cause an update event to be emitted for every entry. The update event does not get
/// emitted synchronously, but is instead scheduled in a microtask.
/// version:
/// 1.0.0
- (void)clear;
/// Deletes the entry for a given key.
/// Deleting a local entry will cause an update event to be emitted for that key. The update event does not get
/// emitted synchronously, but is instead scheduled in a microtask.
/// version:
/// 1.0.0
/// \param key The key of the entry to delete.
///
- (void)delete:(NSString * _Nonnull)key;
/// Returns the file ref for the given key.
/// version:
/// 1.0.0
/// \param key The key of the file ref to retrive.
///
///
/// returns:
/// The value for the given key or nil if the key does not exist.
- (FileRef * _Nullable)get:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an entry for the given key.
/// version:
/// 1.0.0
/// \param key The key to look for.
///
///
/// returns:
/// True if there is an entry for the given key.
- (BOOL)has:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)lostPeer:(RtcPeer * _Nonnull)peer;
- (void)receivedChannel:(DataChannel * _Nonnull)channel peer:(RtcPeer * _Nonnull)peer;
- (void)receivedDataUpdate:(DataUpdate * _Nonnull)update;
/// Sets set file ref for the given key.
/// Setting a local value will cause an update event to be emitted for that key. The update event does not get
/// emitted synchronously, but is instead scheduled in a microtask.
/// version:
/// 1.0.0
/// \param file The value to set.
///
/// \param key The key of the value.
///
- (void)set:(FileRef * _Nonnull)file for:(NSString * _Nonnull)key;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel SWIFT_UNAVAILABLE;
@end




/// Represents the transfer of a local file to a remote peer.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>done</code>:     Emitted when the file transfer is completed successfully.
///   </li>
///   <li>
///     <code>end</code>:      Emitted when the file transfer ends, both on success and failure. Receives <code>FileRefEndReason</code>
///     instance.
///   </li>
///   <li>
///     <code>error</code>:    Emitted when the file transfer fails. Receives <code>Error</code> instance.
///   </li>
///   <li>
///     <code>progress</code>: Emitted each time the progress of the file transfer changes. Receives <code>Float</code> instance.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct12FileTransfer")
@interface FileTransfer : EventEmitter
/// The error that ended the file transfer, or null if the transfer hasn’t ended with an error.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) C3Error * _Nullable error;
/// The progress of the file transfer, in the range [0, 1].
/// version:
/// 1.0.0
@property (nonatomic, readonly) double progress;
/// Aborts the file transfer, if it is still ongoing.
/// version:
/// 1.0.0
- (void)abort;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// An error that indicates that a file transfer failed because of a protocol error or data corruption.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct17FileTransferError")
@interface FileTransferError : C3Error
@end


/// The requested action could not be performed because the authenticated user has a guest account.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct16GuestAccessError")
@interface GuestAccessError : C3Error
@end

/// The guest access rule of a room determines how guests are able to join the room.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, GuestAccessRule) {
/// Guests are allowed to join the room, but are still subject to the join rule of the room.
/// version:
/// 1.0.0
  GuestAccessRuleOpen = 0,
/// Guests are not allowed to join the room.
/// version:
/// 1.0.0
  GuestAccessRuleClosed = 1,
};

/// An enumeration describing the visibility rules for events in a room.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, HistoryVisibility) {
/// Any member of the room can read the entire history.
/// version:
/// 1.0.0
  HistoryVisibilityShared = 0,
/// Members can only read the history from the point they where invited to the room.
/// version:
/// 1.0.0
  HistoryVisibilityInvited = 1,
/// Members can only read the history from the point they joined the room.
/// version:
/// 1.0.0
  HistoryVisibilityJoined = 2,
/// All events in the room can be read by anyone, including guest accounts.
/// version:
/// 1.0.0
  HistoryVisibilityPublic = 3,
};


/// A STUN or TURN server credentials.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct9IceServer")
@interface IceServer : NSObject
/// A STUN or TURN server url, e.g. <code>stun:stun.example.com</code> or <code>turn:turn.example.com</code>.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The username used when accessing the helper server.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable username;
/// The password associated with the username.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable password;
/// Creates an instance of ICE server.
/// version:
/// 1.0.0
/// \param url A STUN or TURN server url.
///
/// \param username The username user when accessing the helper server.
///
/// \param password The password associated with the username.
///
///
/// returns:
/// Initialized ICE server instance.
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url username:(NSString * _Nullable)username password:(NSString * _Nullable)password OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// The image resize method enumeration.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, ImageResizeMethod) {
/// Image will be scaled.
/// version:
/// 1.0.0
  ImageResizeMethodScale = 0,
/// Image will be cropped.
/// version:
/// 1.0.0
  ImageResizeMethodCrop = 1,
};


/// Represents a server-side image resource.
/// This class provides a link to an image, as well as the possibility to thumbnail the image.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct13ImageResource")
@interface ImageResource : NSObject
/// The uri to the image.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/// The original resource uri of the resource, of the form <code>"mxc://..."</code>.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull resourceUri;
/// Generates a thumbnail uri for the image resource.
/// version:
/// 1.0.0
/// \param width The request width of the thumbnail.
///
/// \param height The request height of the thumbnail.
///
/// \param resizeMethod The method used for resizing the image.
///
///
/// returns:
/// Thumbnail url.
- (NSString * _Nonnull)thumbnailWithWidth:(float)width height:(float)height resizeMethod:(enum ImageResizeMethod)resizeMethod SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Represents a media upload.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>done</code>:     Emitted when the upload has completed successfully.
///   </li>
///   <li>
///     <code>progress</code>: Emitted when the progress of the upload is updated.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct11ImageUpload")
@interface ImageUpload : EventEmitter
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// The server encountered an error because of an unexpected code path or an invalid state.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct19InternalServerError")
@interface InternalServerError : C3Error
@end


/// The requested room alias is invalid because it contains forbidden characters. Aliases are not allowed to contain
/// whitespace characters.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct17InvalidAliasError")
@interface InvalidAliasError : C3Error
@end


SWIFT_CLASS("_TtC3cct19InvalidCaptchaError")
@interface InvalidCaptchaError : C3Error
@end


/// The requested username is not valid because it contains forbidden characters. Usernames are only allowed to contain
/// <code>a-z</code>, <code>0-9</code>, and <code>_-./</code>.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct20InvalidUsernameError")
@interface InvalidUsernameError : C3Error
@end



/// The join rule of a room determines how users are able to join the room.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, JoinRule) {
/// The user can be joined by anyone that has the room id or an alias of the room.
/// version:
/// 1.0.0
  JoinRuleOpen = 0,
/// Only allows users to join after first being invited to the room by an existing member.
/// version:
/// 1.0.0
  JoinRuleInvite = 1,
};

typedef SWIFT_ENUM(NSInteger, LogLevel) {
  LogLevelError = 0,
  LogLevelWarning = 1,
  LogLevelInfo = 2,
  LogLevelDebug = 3,
  LogLevelVerbose = 4,
};




/// A component that is used to broadcast media to all peers.
/// Label: <em>cct.media.broadcaster</em>.
/// version:
/// 1.0.0
/// <h4>Example</h4>
/// Example of connecting a <code>MediaBroadcaster</code> to a conference
/// \code
/// let remoteView: UIView = ...
///
/// ...
///
/// let conference = room.startConference()
///
/// let camera = DeviceSource()
/// let broadcaster = MediaBroadcaster()
/// camera.connect(to: broadcaster)
///
/// broadcaster.on("remoteSource", target: self, callback: #selector(onRemoteSource))
///
/// conference.attach(broadcaster, as: "my-broadcaster")
///
/// ...
///
/// @objc func onRemoteSource(_ source: [String:Any]) {
///     (remoteSource["source"] as! MediaTee).connect(remoteView)
/// }
///
/// \endcode
SWIFT_CLASS("_TtC3cct16MediaBroadcaster")
@interface MediaBroadcaster : RtcComponent
/// The input for the media that will be broadcasted to all peers.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) Passthrough * _Nonnull input;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The remote sources of all the peers that are broadcasting media.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, MediaTee *> * _Nonnull remoteSources;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (void)receivedPeer:(RtcPeer * _Nonnull)peer;
- (void)lostPeer:(RtcPeer * _Nonnull)peer;
- (void)willDetach;
- (void)close;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC3cct16MediaConstraints")
@interface MediaConstraints : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable minAspectRatio;
@property (nonatomic, readonly, copy) NSString * _Nullable maxAspectRatio;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (MediaConstraints * _Nonnull)withMinWidth:(NSInteger)minWidth maxWidth:(NSInteger)maxWidth SWIFT_WARN_UNUSED_RESULT;
- (MediaConstraints * _Nonnull)withMinHeight:(NSInteger)minHeight maxHeight:(NSInteger)maxHeight SWIFT_WARN_UNUSED_RESULT;
- (MediaConstraints * _Nonnull)withMinAspectRatio:(NSString * _Nonnull)minAspectRatio maxAspectRatio:(NSString * _Nonnull)maxAspectRatio SWIFT_WARN_UNUSED_RESULT;
- (MediaConstraints * _Nonnull)withMinFrameRate:(NSInteger)minFrameRate maxFrameRate:(NSInteger)maxFrameRate SWIFT_WARN_UNUSED_RESULT;
- (MediaConstraints * _Nonnull)withEchoCancellation:(BOOL)echoCancellation SWIFT_WARN_UNUSED_RESULT;
- (MediaConstraints * _Nonnull)withAutoGainControl:(BOOL)autoGainControl SWIFT_WARN_UNUSED_RESULT;
- (MediaConstraints * _Nonnull)withNoiseSuppression:(BOOL)noiseSuppression SWIFT_WARN_UNUSED_RESULT;
@end







/// A class which represents an input of <code>MediaNode</code>. Outputs are connected to inputs in order to forward media streams.
/// This class should only be used within the implementation of media nodes. While it is possible to attach inputs to an
/// existing media node, it should be avoided. Use an additional media node to implement the desired behaviour instead,
/// such as a passthrough.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct14MediaNodeInput")
@interface MediaNodeInput : NSObject
/// The name of this input. This is only meaningful for inputs that belong to media nodes with multiple inputs.
/// Any input that belong to one of the base media node implementations, such as MediaSink, will have the name
/// <code>default</code>.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The current target of this input.
/// The input will always be set to the media node output that the input is connected to, and not the media node
/// that the connect might have been called on.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) MediaNodeOutput * _Nullable target;
/// The inputs’s current media stream, or nil.
/// version:
/// 1.0.0
@property (nonatomic, strong) RtcMediaStream * _Nullable stream;
/// Creates an instance of media node input.
/// version:
/// 1.0.0
/// \param name The name of the input.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// Disconnect this input from a target.
/// If no target is specified, currently connected target will be disconnected.
/// version:
/// 1.0.0
/// \param target The target to disconnect from. May be nil.
///
- (void)disconnectFrom:(id _Nullable)target;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Resolves the input of a target. If the lookup fails, an error will be thrown.
/// Inputs are resolved as follows, starting with a target:
/// <ul>
///   <li>
///     If the current target is a media node input instance, stop and return the target.
///   </li>
///   <li>
///     If the target is an object, set the new target to the input property of the target, and start over.
///   </li>
///   <li>
///     Return nil.
///   </li>
/// </ul>
/// version:
/// 1.0.0
/// \param target The target to resolve the input of.
///
///
/// returns:
/// The resolved input.
+ (MediaNodeInput * _Nullable)resolve:(id _Nonnull)target SWIFT_WARN_UNUSED_RESULT;
/// Detaches the input from it’s parent and removes any connection. Use this to clean up inputs in media nodes with
/// dynamic inputs. After this method has been called the input can no longer be used.
/// This method is internal and should only be called by the implementation of the parent media node.
/// version:
/// 1.0.0
- (void)detach;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// A class which represents an output of <code>MediaNode</code>. Outputs are connected to inputs in order to forward media
/// streams.
/// This class should only be used within the implementation of media nodes. While it is possible to attach outputs to
/// an existing media node, it should be avoided. Use an additional media node to implement the desired behaviour
/// instead, such as a passthrough.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct15MediaNodeOutput")
@interface MediaNodeOutput : NSObject
/// The name of this output. This is only meaningful for outputs that belong to media nodes with multiple outputs.
/// Any output that belong to one of the base media node implementations, such as <code>MediaSource</code>, will have the name
/// <code>default</code>.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The output’s current media stream, or nil.
/// version:
/// 1.0.0
@property (nonatomic, strong) RtcMediaStream * _Nullable stream;
/// A read-only set of all the current targets of the output.
/// The set will only contain resolved inputs, and not the original targets given to the connect method.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<MediaNodeInput *> * _Nonnull targets;
/// Creates an instance of media node output.
/// version:
/// 1.0.0
/// \param name The name of the output.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Connect this output to a target. Each output can be connected to multiple targets.
/// version:
/// 1.0.0
/// \param target The target to connect the output to.
///
- (void)connectTo:(id _Nonnull)target;
/// Disconnect this output from a target.
/// If no target is specified, all targets will be disconnected.
/// version:
/// 1.0.0
/// \param target The target to disconnect from. May be nil.
///
- (void)disconnectFrom:(id _Nullable)target;
/// Resolves the output of a target. If the lookup fails, an error will be thrown.
/// Outputs are resolved as follows, starting with a target:
/// <ul>
///   <li>
///     If the current target is a media node output instance, stop and return the target.
///   </li>
///   <li>
///     If the target is an object, set the new target to the output property of the target, and start over.
///   </li>
///   <li>
///     Return nil.
///   </li>
/// </ul>
/// version:
/// 1.0.0
/// \param target The target to resolve the output of.
///
///
/// returns:
/// The resolved output.
+ (MediaNodeOutput * _Nullable)resolve:(id _Nonnull)target SWIFT_WARN_UNUSED_RESULT;
/// Detaches the output from it’s parent and removes any connections. Use this to clean up outputs in media nodes
/// with dynamic outputs. After this method has been called the input can no longer be used.
/// This method is internal and should only be called by the implementation of the parent media node.
/// version:
/// 1.0.0
- (void)detach;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// A base class for media nodes with a single input and no output. Typically used to render the stream, or as a base
/// for nodes with multiple outputs.
/// The subclass should override the <code>onStream</code> method.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct9MediaSink")
@interface MediaSink : MediaNode
/// The input.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) MediaNodeInput * _Nonnull input;
/// The current input stream.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) RtcMediaStream * _Nullable stream;
/// version:
/// 1.0.0
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// Abstract method that is called whenever the input stream is updated, this should be overridden by the subclass.
/// This will only ever be called if the stream has changed, been added, or removed, i.e. <code>stream</code> and <code>oldStream</code>
/// will never be equal.
/// The <code>MediaSink.onStream(_:_:)</code> method will not be called when the backing tracks of a stream is changed. If the
/// subclass needs to be notified of track updates this has to be done manually using the media stream listeners.
/// version:
/// 1.0.0
/// \param stream The new media stream, or nil.
///
/// \param oldStream The old media stream, or nil.
///
- (void)onStream:(RtcMediaStream * _Nullable)stream :(RtcMediaStream * _Nullable)oldStream;
- (void)close;
@end

@class MuteFilter;

/// A simple MediaNode that can be used to expose media together with the basic utilities of emitting stream events,
/// exposing a stream stream property, and a mute property.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>stream</code>: Emitted whenever the stream is changed. Receives <code>RtcMediaStream</code> instance.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct8MediaTee")
@interface MediaTee : MediaNode
/// The input of the media tee.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) MuteFilter * _Nonnull input;
/// Creates an instance of media tee.
/// version:
/// 1.0.0
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (void)close;
@end


typedef SWIFT_ENUM(NSInteger, MessageType) {
  MessageTypeText = 0,
  MessageTypeEmote = 1,
  MessageTypeNotice = 2,
  MessageTypeImage = 3,
  MessageTypeAudio = 4,
  MessageTypeVideo = 5,
  MessageTypeLocation = 6,
  MessageTypeFile = 7,
};


/// A media node that can mute the audio and/or video of a stream.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct10MuteFilter")
@interface MuteFilter : MediaFilter
/// Creates an instance of mute filter.
/// version:
/// 1.0.0
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (void)onStream:(RtcMediaStream * _Nullable)stream :(RtcMediaStream * _Nullable)oldStream;
@end




/// The requested action could not be performed because it is not allowed, e.g. the authenticated user doesn’t have
/// enough power level, or a user media request was denied.
/// Actions that are not allowed because the user has a guest account result in a <code>GuestAccessError</code> instead of this.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct15NotAllowedError")
@interface NotAllowedError : C3Error
@end


/// The requested resource could not be found, e.g. when looking up a room by alias or requesting a media source.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct13NotFoundError")
@interface NotFoundError : C3Error
@end


/// The constraints of the performed action could not be satisfied, e.g. the requested video frame rate could not be
/// delivered.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct20OverconstrainedError")
@interface OverconstrainedError : C3Error
@end


/// A simple identity filter that simply passes on the input stream.
/// This node can e.g. be used to provide a separate output node in order to avoid losing internal connections in a
/// node. The example below shows how a container node uses a passthrough element in order to avoid losing the
/// connection between the filter and analyser if <code>MediaNode.disconnect(from:)</code> is called on the output.
/// \code
///                       ┌──────────┐
///                     ┌─┤ Analyser │
///          ┌────────┐ │ └──────────┘
///  input ○─┤ Filter ├─┤
///          └────────┘ │ ┌─────────────┐
///                     └─┤ Passthrough ├─○ output
///                       └─────────────┘
///
/// \endcodeversion:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>stream</code>: Emitted whenever the stream is changed. Receives <code>RtcMediaStream</code> instance.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct11Passthrough")
@interface Passthrough : MediaFilter
/// Creates an instance of passthrough.
/// version:
/// 1.0.0
/// \param silent If silent is set to false the node will emit a log message with log level info whenever the
/// stream is updated.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name silent:(BOOL)silent OBJC_DESIGNATED_INITIALIZER;
- (void)onStream:(RtcMediaStream * _Nullable)stream :(RtcMediaStream * _Nullable)oldStream;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
@end


/// A simple component that allows a single media stream to be sent and received within a call. This component can only
/// be used by calls, and will throw an error if attached to a conference.
/// Media does not have to be sent both ways, i.e. the component will work even if none or just one of the peers are
/// sending media.
/// This component is usually not used directly, as it is used in the implementation of <code>Call.setLocalSource(_:as:)</code> and
/// <code>Call.remoteSource(_:)</code>.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct13PeerMediaPipe")
@interface PeerMediaPipe : RtcComponent
/// The input for the media that will be sent to the peer.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) Passthrough * _Nonnull input;
/// Output for media that is sent from the peer.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) MediaTee * _Nonnull output;
/// Creates an instance of peer media pipe.
/// version:
/// 1.0.0
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (void)receivedPeer:(RtcPeer * _Nonnull)peer;
- (void)willDetach;
- (void)close;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC3cct20PowerLevelsContainer")
@interface PowerLevelsContainer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A class which provides a fluent API for modifying a power levels object. It cannot be instantiated directly and can
/// only be created through the static factory methods as well as <code>Room.editPowerLevels()</code>.
/// Many methods are verbs, but they simply set the power level required to execute the matching action, with the
/// exception of <code>PowerLevelsEdit.commit</code>.
/// No actual action is taken until the <code>PowerLevelsEdit.commit</code> method is called. The commit method is only available
/// if the instance was obtained from a <code>Room.editPowerLevels()</code> call. It is also possible to create an instance with
/// one of the static factory methods and then pass the instance to <code>Room.setPowerLevels(_:success:failure:)</code>.
/// version:
/// 1.0.0
/// <h4>Example</h4>
/// \code
/// room.editPowerLevels()
///     .kick(has: 60)
///     .addState(has: 0)
///     .user(promotedUser, has: 60)
///     .event("my.customer.event", has: 20)
///     .commit({
///         print("Power levels updated!)
/// })
///
/// room.setPowerLevels(
///     PowerLevelsEdit.fromDefault(client.user!),
///     success: { room in
///         print("Power levels reset")
/// })
///
/// \endcode
SWIFT_CLASS("_TtC3cct15PowerLevelsEdit")
@interface PowerLevelsEdit : PowerLevelsContainer
/// Commits the current state of the power levels edit by updating the power levels of the room to the current
/// values. This method is only present if the instance was obtained via <code>Room.editPowerLevels()</code>.
/// <h4>Note</h4>
/// Power levels can no longer be edited after successful commit. In order to perform further changes,
/// <code>Room.editPowerLevels()</code> has to be called again.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) void (^ _Nullable commit)(void (^ _Nullable)(Room * _Nonnull), void (^ _Nullable)(C3Error * _Nonnull));
/// Creates a new <code>PowerLevelsEdit</code> object with the default power levels.
/// The creator of the room can optionally be specified, in which case the creators power level will be set to the
/// default power level of the creator.
/// version:
/// 1.0.0
/// \param creator An optional creator of the room.
///
///
/// returns:
/// New instance of <code>PowerLevelsEdit</code>.
+ (PowerLevelsEdit * _Nonnull)fromDefaultFor:(User * _Nullable)creator SWIFT_WARN_UNUSED_RESULT;
/// Creates a new <code>PowerLevelsEdit</code> object with all power levels set to 0.
/// version:
/// 1.0.0
///
/// returns:
/// New instance of <code>PowerLevelsEdit</code>.
+ (PowerLevelsEdit * _Nonnull)fromZero SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to add a new state to the room.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)addStateWithHas:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to send an event of a specific type or set a state of the same type.
/// version:
/// 1.0.0
/// \param eventType The type of the event.
///
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)eventWith:(NSString * _Nonnull)eventType has:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the default power level for all event types in the room. If a specific power level hasn’t been set for an
/// event type this value will be used.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)eventDefaultWithIs:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to invite a user to the room.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)inviteWithHas:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to kick a user from the room.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)kickWithHas:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to redact and event in the room.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)redactWithHas:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to change the name of a room.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)setNameWithHas:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to change the power levels of a room.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)setPowerLevelsWithHas:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to change the topic of a room.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)setTopicWithHas:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level required to change the type of a room.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)setTypeWithHas:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the power level of a user.
/// version:
/// 1.0.0
/// \param user The user instance.
///
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)user:(User * _Nonnull)user has:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
/// Sets the default power level for users in the room. If a specific power level hasn’t been set for a user this
/// value will be used.
/// version:
/// 1.0.0
/// \param level The new power level requirement.
///
///
/// returns:
/// Current instance of <code>PowerLevelsEdit</code>.
- (PowerLevelsEdit * _Nonnull)userDefaultWithIs:(NSInteger)level SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;

/// A class which provides convenience accessors for the internal representation of a power levels structure.
/// This will usually be accessed through <code>Room.powerLevels</code>.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct17PowerLevelsReader")
@interface PowerLevelsReader : PowerLevelsContainer
/// The power level required to add a new state to a room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger addState;
/// The default power level for events in the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger eventDefault;
/// An object where the key is an event type and the value is that event type’s required power level.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull events;
/// The power level required to invite a user to the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger invite;
/// The power level required to kick a user form the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger kick;
/// The power level required to redact an event from the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger redact;
/// The power level required to set the name of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger setName;
/// The power level required to set the power levels in a room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger setPowerLevels;
/// The power level required to set the topic of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger setTopic;
/// The power level required to set the type of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger setType;
/// The default power level for users in the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSInteger userDefault;
/// An object where the key is a userId and the value is that user’s power level.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull users;
@end


SWIFT_CLASS("_TtC3cct23ProjectionConfiguration")
@interface ProjectionConfiguration : NSObject
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
@property (nonatomic, readonly) enum ContentMode contentMode;
- (nonnull instancetype)initWithWidth:(NSInteger)width aspectRatio:(float)aspectRatio contentMode:(enum ContentMode)contentMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// The action could not be performed because it hit the rate limit of the server. This is currently only used
/// internally since requests are automatically retried if they hit the rate limit.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct14RateLimitError")
@interface RateLimitError : C3Error
@end

typedef SWIFT_ENUM(NSInteger, ReadyState) {
  ReadyStateOpening = 0,
  ReadyStateOpen = 1,
  ReadyStateClosed = 2,
};

enum RoomMembership : NSInteger;
@class RoomState;

/// A representation of a room that users join in order to communicate.
/// version:
/// 1.0.0
/// <h4>Events</h4>
/// <ul>
///   <li>
///     <code>alias</code>:             Emitted when the alias of the room changes.
///   </li>
///   <li>
///     <code>avatar</code>:            Emitted when the avatar of the room is changed. Receives <code>ImageResource</code> instance or nil.
///   </li>
///   <li>
///     <code>call</code>:              Emitted when there is an incoming call to this room. Incoming calls are stopped and need to
///     be started with <code>Call.start()</code> before a connection is set up. Receives <code>Call</code> instance.
///   </li>
///   <li>
///     <code>event</code>:             Emitted when a new event is triggered in the room. Will not trigger when loading old events.
///     Receives <code>Event</code> instance.
///   </li>
///   <li>
///     <code>event:<type></code>:      Same as <code>event</code>, but listens to a specific event type. Receives <code>Event</code> instance.
///   </li>
///   <li>
///     <code>events</code>:            Emitted when the list of events in the room change. This event does not have any parameters,
///     the updated list of events can instead be accessed via the <code>Room.events</code> property.
///   </li>
///   <li>
///     <code>guestAccessRule</code>:   Emitted when the guest access rule of the room changes. Receives <code>GuestAccessRule</code> instance.
///   </li>
///   <li>
///     <code>historyVisibility</code>: Emitted when the history visibility of the room changes. Receives <code>HistoryVisibility</code>
///     instance.
///   </li>
///   <li>
///     <code>invite</code>:            Emitted when a user is invited to the room. Receives the user that was invited.
///   </li>
///   <li>
///     <code>invited</code>:           Emitted when the invited user collection is changed. This event does not have any parameters,
///     the updated list of users can instead be accessed via the <code>Room.invited</code>.
///   </li>
///   <li>
///     <code>join</code>:              Emitted when a user joins the room. Receives the user that joined.
///   </li>
///   <li>
///     <code>joinRule</code>:          Emitted when the join rule of the room changes. Receives <code>JoinRule</code> instance.
///   </li>
///   <li>
///     <code>leave</code>:             Emitted when a user leaves the room. Receives the user.
///   </li>
///   <li>
///     <code>members</code>:           Emitted when the members user collection is changed. This event does not have any parameters,
///     the updated list of users can instead be accessed via the <code>Room.members</code> property.
///   </li>
///   <li>
///     <code>membership</code>:        Emitted when the authenticated users membership of the room is changed. Receives
///     <code>RoomMembership</code> instance.
///   </li>
///   <li>
///     <code>memberships</code>:       Emitted when the membership of any user in the room is changed. Receives a map of users and
///     their memberships.
///   </li>
///   <li>
///     <code>name</code>:              Emitted when the name of the room is changed. Receives the new name.
///   </li>
///   <li>
///     <code>otherMembers</code>:      Emitted when the <code>Room.otherMembers</code> user collection is changed. This event does not have any
///     parameters, the updated list of users can instead be accessed via the <code>Room.otherMembers</code>
///     property.
///   </li>
///   <li>
///     <code>powerLevels</code>:       Emitted when the power levels of the room change. Receives <code>PowerLevelsReader</code> instance.
///   </li>
///   <li>
///     <code>state</code>:             Emitted when a state of the room is changed. Receives <code>RoomState</code> instance.
///   </li>
///   <li>
///     <code>state:<stateType></code>: Same as <code>state</code>, but listens to a specific state type.
///   </li>
///   <li>
///     <code>topic</code>:             Emitted when the topic of the room is changed. Receives the new topic.
///   </li>
///   <li>
///     <code>type</code>:              Emitted when the type of the room is changed.
///   </li>
///   <li>
///     <code>typing</code>:            Emitted when the list of users who are currently typing is changed. This event does not have
///     any parameters, the updated list of users can instead be accessed via the <code>Room.typing</code>
///     property.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct4Room")
@interface Room : EventEmitter
/// Account data object that is used to access room scoped account data.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) AccountData * _Nullable accountData;
/// The alias of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable alias;
/// True if all past events have been loaded.
/// version:
/// 1.0.0
@property (nonatomic, readonly) BOOL allEventsLoaded;
/// The current avatar of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) ImageResource * _Nullable avatar;
/// All active calls in the room. Each key-value pair is the other user and the call object.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDictionary<User *, Call *> * _Nonnull calls;
/// The active conference in the room, if there is one.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) Conference * _Nullable conference;
/// The events of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<Event *> * _Nonnull events;
/// The guestAccessRule of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) enum GuestAccessRule guestAccessRule;
/// The current history visibility of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) enum HistoryVisibility historyVisibility;
/// The id of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Users that have been invited to the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<User *> * _Nonnull invited;
/// The user that invited the client to the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) User * _Nullable invitedBy;
/// True if more events are currently being loaded in.
/// version:
/// 1.0.0
@property (nonatomic, readonly) BOOL isLoading;
/// The joinRule of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) enum JoinRule joinRule;
/// The members of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<User *> * _Nonnull members;
/// The type of membership that the authenticated user has.
/// version:
/// 1.0.0
@property (nonatomic, readonly) enum RoomMembership membership;
/// The current name of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// All members of the room except for the authenticated user.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<User *> * _Nonnull otherMembers;
/// The power level of the own user in this room. Or nil if not a member of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly) NSUInteger powerLevel;
/// The power levels in the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) PowerLevelsReader * _Nonnull powerLevels;
/// A list of state types that are present in this room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<RoomState *> * _Nonnull states;
/// The current topic of the room.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable topic;
/// The users in the room that are currently typing.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<User *> * _Nonnull typing;
/// Start editing the power levels of this room using a <code>PowerLevelsEdit</code>.
/// version:
/// 1.0.0
///
/// returns:
/// <code>PowerLevelsEdit</code> instance or nil if the user is a member of the room.
- (PowerLevelsEdit * _Nullable)editPowerLevels SWIFT_WARN_UNUSED_RESULT;
/// Invites a user to this room.
/// version:
/// 1.0.0
/// \param user The user to invite.
///
/// \param success The callback to be executed upon successful invite. Receives room instance.
///
/// \param failure The callback to be executed upon failed invite. Receives failure cause.
///
- (void)invite:(User * _Nonnull)user success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Join this room.
/// version:
/// 1.0.0
/// \param success The callback to be executed upon successful join. Receives joined room instance.
///
/// \param failure The callback to be executed upon failed join. Receives failure cause.
///
- (void)joinWithSuccess:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Kick a user from this room.
/// version:
/// 1.0.0
/// \param user The user to kick.
///
/// \param success The callback to be executed upon successful kick. Receives room instance.
///
/// \param failure The callback to be executed upon failed kick. Receives failure cause.
///
- (void)kick:(User * _Nonnull)user success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Leave this room.
/// version:
/// 1.0.0
/// \param success The callback to be executed upon successful leave. Receives left room instance.
///
/// \param failure The callback to be executed upon failed leave. Receives failure cause.
///
- (void)leaveWithSuccess:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Load in old events. If multiple requests are sent at once they will be queued after eachother.
/// By passing a filterFunction, it is possible to filter whether each event should count towards the total count,
/// and keep loading in events until the total count has been reached. Events that are filtered out by the filter
/// function are not discarded, they simply don’t count towards the load count.
/// If a filter function is used the number of matching events might exceed the requested count, since events are
/// loaded in chunks and no events will be ignored.
/// version:
/// 1.0.0
/// \param count The number of events to load.
///
/// \param chunkSize Only valid if a filter function is given. It specifies how many events are loaded
/// and filtered with each request. Defaults to 10.
///
/// \param filterFunction Function used to filter out events that should count towards the event count.
///
/// \param success The callback to be executed upon successful fetch. Receives an array of events.
///
/// \param failure The callback to be executed upon failed fetch. Receives failure cause.
///
- (void)loadWithCount:(NSUInteger)count chunkSize:(NSUInteger)chunkSize filterFunction:(BOOL (^ _Nullable)(Event * _Nonnull))filterFunction success:(void (^ _Nullable)(NSArray<Event *> * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Send an event.
/// version:
/// 1.0.0
/// \param content The content of the event.
///
/// \param type The type of the event.
///
/// \param success The callback to be executed upon successful dispatch. Receives room instance.
///
/// \param failure The callback to be executed upon failed dispatch. Receives failure cause.
///
- (void)send:(NSDictionary<NSString *, id> * _Nonnull)content type:(NSString * _Nonnull)type success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Send a message.
/// version:
/// 1.0.0
/// \param message The message to send.
///
/// \param success The callback to be executed upon successful dispatch. Receives room instance.
///
/// \param failure The callback to be executed upon failed dispatch. Receives failure cause.
///
- (void)send:(Message * _Nonnull)message success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets the avatar of the room.
/// version:
/// 1.0.0
/// \param avatar The new avatar for this room.
///
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setAvatar:(NSString * _Nonnull)avatar success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets how guests are allowed to join the room. If set to <code>GuestAccessRule.open</code>, guests are allowed to join the
/// rule, although they are still subject to the join rule of the room. If set to <code>GuestAccessRule.closed</code>, guests
/// are not allowed to join the room at all.
/// The default guest access rule is <code>GuestAccessRule.closed</code>.
/// version:
/// 1.0.0
/// \param guestAccessRule The new guest access rule for this room.
///
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.<
///
- (void)setGuestAccessRule:(enum GuestAccessRule)guestAccessRule success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets the history visibility of the room.
/// version:
/// 1.0.0
/// <ul>
///   <li>
///     historyVisibility: The new history visibility of this room.
///   </li>
/// </ul>
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setHistoryVisibility:(enum HistoryVisibility)historyVisibility success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets how other users are able to join this room. An <code>JoinRule.open</code> room can be joined with anyone that has the
/// room id or an alias of the room, while a room with the <code>JoinRule.invite</code> rule only allows users to join after
/// first being invited to the room by an existing member.
/// \param rule The new join rule for this room.
///
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setJoinRule:(enum JoinRule)rule success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets the name of the room.
/// version:
/// 1.0.0
/// \param name The new name for this room.
///
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setName:(NSString * _Nonnull)name success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets the entire power level state of the room to that of a power level container object.
/// version:
/// 1.0.0
/// \param powerLevels A power level container.
///
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setPowerLevels:(PowerLevelsContainer * _Nonnull)powerLevels success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets the topic of the room.
/// version:
/// 1.0.0
/// \param topic The new topic for this room.
///
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setTopic:(NSString * _Nonnull)topic success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Sets whether the user is currently typing or not, with an optional timeout and margin. The timeout can be used
/// to temporarily set typing to true, while the margin allows throttling of requests.
/// The margin permits setTyping to be called at a high rate without actually sending any requests to the server. A
/// request is sent only if the end of the previous request’s timeout has been reached or if the time until then is
/// smaller than the margin.
/// e.i. <code>if (current time + margin) > (previous (request time + timeout))</code>
/// Specifying a timeout is only valid when setting typing to true, as setting it to false will always do so
/// indefinetly.
/// Setting the typing state will cause any previous state, including timeouts, to be overwritten.
/// version:
/// 1.0.0
/// \param typing The new typing state.
///
/// \param timeout Timeout in seconds.
///
/// \param margin Margin in seconds, or -1 to always send a request.
///
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)setTyping:(BOOL)typing timeout:(NSTimeInterval)timeout margin:(NSTimeInterval)margin success:(void (^ _Nullable)(Room * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
/// Initiate a call in the room.
/// version:
/// 1.0.0
/// \param user The user to call. The user has to be a member of this room.
///
///
/// returns:
/// The call, or nil in case it is impossible to initiate a call.
- (Call * _Nullable)startCallWith:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT;
/// Start a conference call in the room.
/// version:
/// 1.0.0
///
/// returns:
/// The conference call.
- (Conference * _Nullable)startConferenceWithSwitcherMode:(enum ConferenceSwitcherMode)switcherMode SWIFT_WARN_UNUSED_RESULT;
/// Starts a new passive call in the room. A passive call works much like a normal call, except that it does not
/// initiate any new call, it only accepts incoming calls.
/// This is typically used in the scenario where the creator of a room wants to start setting up a call before
/// knowing who the peer will be.
/// Passive calls will always accept incoming calls from new peers, and hang up the call to old ones. Whenever the
/// call connects to a new peer, a <code>peer</code> event will be emitted from the call.
/// version:
/// 1.0.0
///
/// returns:
/// The call.
- (Call * _Nullable)startPassiveCall SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the state access object for a state of a specific type in the room.
/// version:
/// 1.0.0
/// \param type The state type.
///
///
/// returns:
/// A room state object for interacting with the state.
- (RoomState * _Nonnull)state:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end





/// The type of membership that the authenticated user has.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, RoomMembership) {
/// The authenticated user is a member in the room.
/// version:
/// 1.0.0
  RoomMembershipMember = 0,
/// The authenticated user has been invited to the room.
/// version:
/// 1.0.0
  RoomMembershipInvited = 1,
/// The authenticated user has left the room.
/// version:
/// 1.0.0
  RoomMembershipLeft = 2,
/// The authenticated user has been kicked from the room.
/// version:
/// 1.0.0
  RoomMembershipKicked = 3,
/// Unknown status.
/// version:
/// 1.0.0
  RoomMembershipUnknown = 4,
};


/// Represents a live query that selects a subset of all rooms and transforms them using a map function.
/// Whenever a room receives an event, the map function is run for every query. If the map function returns a falsy
/// value, it is ignored. If the value is truthy, the value is added to the resulting rows.
/// version:
/// 1.0.0
/// <h4>Example</h4>
/// This is an example of a map function that lists all public rooms that the user is a member of:
/// \code
/// { room -> AnyObject? in
///     if room.membership == .member && room.visibility == .public {
///         return room
///     }
///     return nil
/// }
///
/// \endcodeWhenever the value returned by the map function changes, an <code>update</code> event is emitted, as well as <code>added</code> and/or
/// <code>removed</code> events. The value is considered changed if it switches between truthy and falsy, or if the id property of
/// the value changes.
/// This is an example of a map function that lists all rooms to which the user has been invited, as well as the
/// inviting user:
/// \code
/// { room -> AnyObject? in
///     if room.membership == .invited {
///         return [
///             "user": room.invitedBy!,
///             "room": room
///         ]
///     }
///     return nil
/// }
///
/// \endcode<h4>Events</h4>
/// <ul>
///   <li>
///     <code>added</code>:   Emitted when a row is added to the result of the query. Receives added row.
///   </li>
///   <li>
///     <code>removed</code>: Emitted when a row is removed from the result of the query. Receives removed row.
///   </li>
///   <li>
///     <code>updated</code>: Emitted when the result of the query has changed. Receives updated row.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC3cct9RoomQuery")
@interface RoomQuery : EventEmitter
/// The resulting rows of the <code>RoomQuery</code>.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray * _Nonnull rows;
/// Stops the query and frees all resources.
/// version:
/// 1.0.0
- (void)stop;
/// Forces the map function to be rerun for all rooms.
/// version:
/// 1.0.0
- (void)forceUpdate;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end






/// Represents a state in a room identified by a state type, and synchronized between all clients.
/// Each room state is a key-value pair store that emits events when values are changed.
/// The room state also has a default value which can be accessed by omitting the key parameter to any of the methods.
/// The default value is handy for simple states such as setting a hex color for the room.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct9RoomState")
@interface RoomState : EventEmitter
/// A list of all keys who are associated to a value.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/// The room that the room state is derived from.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) Room * _Nonnull room;
/// The type of the room state.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Gets the value for the corresponding key.
/// If the key is omitted the default value of the room state will returned instead.
/// version:
/// 1.0.0
/// \param key The key whose associated value should be returned, or omitted if the default value is desired
/// instead.
///
///
/// returns:
/// The value associated with the key.
- (id _Nullable)get:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the key has been set.
/// version:
/// 1.0.0
/// \param key The key to test if it has been set.
///
///
/// returns:
/// True if the key has been set, false otherwise.
- (BOOL)has:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Sets the value that a key should be associated with. This will override any existing association with the key.
/// If the key is omitted the value of the room state will set instead.
/// <h4>Note</h4>
/// It is best to avoid relying on the returned promise to modify application state, e.g. UI updates, as that will
/// lead to race conditions and undefined behaviour. It is better to use the success callback for feedback that the
/// state was changed was successfully, and tie application state changes an <code>update</code> event handler. This is due to
/// the fact that state changes are received via the event stream, but the returned promise is resolved when the
/// request is returned, and those two events can happen in any order.
/// version:
/// 1.0.0
/// \param value The value that should be associated with the key.
///
/// \param key The key that should be associated with the value.
///
/// \param success The callback to be executed upon successful set. Receives room instance.
///
/// \param failure The callback to be executed upon failed set. Receives failure cause.
///
- (void)set:(id _Nonnull)value for:(NSString * _Nonnull)key success:(void (^ _Nullable)(RoomState * _Nonnull))success failure:(void (^ _Nullable)(C3Error * _Nonnull))failure;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// The room visibility type.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, RoomVisibility) {
/// The room is private.
/// version:
/// 1.0.0
  RoomVisibilityPrivate = 0,
/// The room is public.
/// version:
/// 1.0.0
  RoomVisibilityPublic = 1,
};


@class RTCAudioTrack;
@class RTCVideoTrack;

SWIFT_CLASS("_TtC3cct14RtcMediaStream")
@interface RtcMediaStream : EventEmitter
@property (nonatomic, readonly, copy) NSString * _Nonnull streamId;
@property (nonatomic, readonly, copy) NSArray<RTCAudioTrack *> * _Nonnull audioTracks;
@property (nonatomic, readonly, copy) NSArray<RTCVideoTrack *> * _Nonnull videoTracks;
- (void)addAudioTrack:(RTCAudioTrack * _Nonnull)audioTrack;
- (void)removeAudioTrack:(RTCAudioTrack * _Nonnull)audioTrack;
- (void)addVideoTrack:(RTCVideoTrack * _Nonnull)videoTrack;
- (void)removeVideoTrack:(RTCVideoTrack * _Nonnull)videoTrack;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This class provides a point of interaction with remote peers of an attached component. Peers are accessed either
/// through <code>AttachPoint.peers</code>, or via the overridable methods of an attach point.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct7RtcPeer")
@interface RtcPeer : MediaNode
/// The id of the remote peer.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// An array of data channels that have been created locally.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<DataChannel *> * _Nonnull localChannels;
/// An array of remote data channels that have been created by the peer.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSArray<DataChannel *> * _Nonnull remoteChannels;
/// The default media input for this peer.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) MediaNodeInput * _Nonnull input;
/// The default media output for this peer.
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) MediaNodeOutput * _Nonnull output;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Creates a new data channel to the peer.
/// version:
/// 1.0.0
/// \param label A label describing the data channel.
///
/// \param configuration A desired channel configuration.
///
///
/// returns:
/// The newly created data channel.
- (DataChannel * _Nullable)createChannelWithLabel:(NSString * _Nonnull)label protocol:(NSString * _Nullable)protocol pairingId:(NSString * _Nullable)pairingId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
@end






SWIFT_CLASS("_TtC3cct12SinkRenderer")
@interface SinkRenderer : EventEmitter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// A simple media sink that emits a stream event and provides a stream property. Mainly useful for testing.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct10StreamSink")
@interface StreamSink : MediaSink
- (void)onStream:(RtcMediaStream * _Nullable)stream :(RtcMediaStream * _Nullable)oldStream;
- (void)close;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3cct14StreamSplitter")
@interface StreamSplitter : MediaSink
@property (nonatomic, readonly, strong) MediaNodeOutput * _Nonnull audioOutput;
@property (nonatomic, readonly, strong) MediaNodeOutput * _Nonnull videoOutput;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (void)close;
- (void)onStream:(RtcMediaStream * _Nullable)stream :(RtcMediaStream * _Nullable)oldStream;
@end


SWIFT_CLASS("_TtC3cct20ThumbnailBroadcaster")
@interface ThumbnailBroadcaster : RtcComponent
@property (nonatomic, readonly, strong) MediaNode * _Nonnull input;
@property (nonatomic, readonly, strong) MediaNodeOutput * _Nonnull output;
- (nonnull instancetype)initWithProjectionConfiguration:(ProjectionConfiguration * _Nullable)projectionConfiguration frameRate:(float)frameRate OBJC_DESIGNATED_INITIALIZER;
- (void)close;
- (SinkRenderer * _Nonnull)createRenderer SWIFT_WARN_UNUSED_RESULT;
- (void)lostPeer:(RtcPeer * _Nonnull)peer;
- (void)receivedPeer:(RtcPeer * _Nonnull)peer;
- (void)willAttach:(AttachPoint * _Nonnull)attachPoint;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel SWIFT_UNAVAILABLE;
@end




/// The request was too large, encountered e.g. when sending messages in a room.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct13TooLargeError")
@interface TooLargeError : C3Error
@end


/// An error that indicates that the transfer was interrupted either on purpose or because of connection issues.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct24TransferInterruptedError")
@interface TransferInterruptedError : C3Error
@property (nonatomic, readonly) NSInteger downloadedBytes;
@property (nonatomic, readonly) NSInteger expectedBytes;
@end


SWIFT_CLASS("_TtC3cct9TypeError")
@interface TypeError : C3Error
@end


/// The cause of the error could not be determined. Seeing this error is in itself an error because the real error
/// reason should always be possible to determine.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct12UnknownError")
@interface UnknownError : C3Error
@end


/// Represents a user.
/// version:
/// 1.0.0
SWIFT_CLASS("_TtC3cct4User")
@interface User : EventEmitter
/// The url to the user’s avatar
/// version:
/// 1.0.0
@property (nonatomic, readonly, strong) ImageResource * _Nullable avatar;
/// The id of the user.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The last time the user was active.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSDate * _Nullable lastActive;
/// The name of the user.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The users presence type.
/// version:
/// 1.0.0
@property (nonatomic, readonly) enum UserPresence presence;
/// A message set by the user.
/// version:
/// 1.0.0
@property (nonatomic, readonly, copy) NSString * _Nullable statusMessage;
- (void)close;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end





/// The users presence type.
/// version:
/// 1.0.0
typedef SWIFT_ENUM(NSInteger, UserPresence) {
/// User is online and avaliable.
/// version:
/// 1.0.0
  UserPresenceOnline = 0,
/// User is online and unavailable.
/// version:
/// 1.0.0
  UserPresenceUnavailable = 1,
/// User if offline.
/// version:
/// 1.0.0
  UserPresenceOffline = 2,
};

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
