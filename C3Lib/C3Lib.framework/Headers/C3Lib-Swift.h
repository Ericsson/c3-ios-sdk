// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import WebRTC;
@import MatrixSDK;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/**
  Base for classes which generate events to which one can bind to.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib14C3EventEmitter")
@interface C3EventEmitter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Removes a listener associated with an event. At most one listener is removed, if the same listener has been added multiple times, only the first listener is removed.
  version:
  1.0.0
  \param eventType The event type from which to remove the listener(s).

  \param target The target that should be removed. If omitted, all listeners for the event type are removed.

  \param callback The callback that should be removed. If omitted, all listeners for the target are removed.

*/
- (void)off:(NSString * _Nonnull)eventType target:(id _Nullable)target callback:(SEL _Nullable)callback;
/**
  Adds a new listener for an event. All listeners will be called in the order in which they were added. Adding an already added listener is not an error and will result in the listener being called multiple times.
  version:
  1.0.0
  \param eventType The event to listen for.

  \param target An owner of the selector that will be called whenever the event is emitted.

  \param callback A selector that will be called whenever the event is emitted.

*/
- (void)on:(NSString * _Nonnull)eventType target:(id _Nonnull)target callback:(SEL _Nonnull)callback;
/**
  Works like on, but the listener is at most called once, and then removed.
  version:
  1.0.0
  \param eventType The event to listen for.

  \param target An owner of the selector that will be called whenever the event is emitted.

  \param callback A selector that will be called whenever the event is emitted.

*/
- (void)once:(NSString * _Nonnull)eventType target:(id _Nonnull)target callback:(SEL _Nonnull)callback;
/**
  Emits an event of given type for every listener associated with the event.
  version:
  1.0.0
  \param eventType The event type for which to emit the event.

  \param value Optional argument to pass to the listeners associated with the event.

*/
- (void)emit:(NSString * _Nonnull)eventType :(id _Null_unspecified)value;
- (void)close;
@end


/**
  Represents account data that is persistent and unique to each client. It is synchronized between all clients of the same user, and can be used for e.g. settings or unread notifications.
  Account data can be scoped either to the user or to a room. It is accessed through \code
  C3Client.accountData
  \endcode and \code
  C3Room.accountData
  \endcode.
  Each account data is a key-value pair store that emits events when values are changed.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      update
      \endcode:       Emitted when any account data entry changes. Receives \code
      C3DataUpdate
      \endcode instance.
    </li>
    <li>
      \code
      update:<key>
      \endcode: Emitted when the value associated with the given key is changed. Receives the new value, if any.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib13C3AccountData")
@interface C3AccountData : C3EventEmitter
/**
  A list of all keys that have been set.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/**
  Gets the value for the corresponding key.
  version:
  1.0.0
  \param key The key whose associated value should be returned.


  returns:
  The value associated with the key.
*/
- (id _Nullable)get:(NSString * _Nonnull)key;
/**
  Returns true if the key has been set.
  version:
  1.0.0
  \param key The key to test if it has been set.


  returns:
  True if the key has been set, false otherwise.
*/
- (BOOL)has:(NSString * _Nonnull)key;
/**
  Sets the value that a key should be associated with. This will override any existing association with the key.
  remark: It is best to avoid relying on the callbacks to modify application state, e.g. UI updates, as that will lead to race conditions and undefined behaviour. It is better to use the callbacks for feedback that the state was changed was successfully, and tie application state changes an \code
  update
  \endcode event handler. This is due to the fact that state changes are received via the event stream, but the callback is resolved when the request is returned, and those two events can happen in any order.
  version:
  1.0.0
  \param key The key that should be associated with the value.

  \param value The value that should be associated with the key.

  \param success The callback to be executed upon successful set. Receives account data instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)set:(id _Nonnull)value for:(NSString * _Nonnull)key success:(void (^ _Nullable)(C3AccountData * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3AccountData (SWIFT_EXTENSION(C3Lib))
@end


/**
  A class which provides a way to read and modify a set of data that is synchronized between all the peers of a component.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib12C3AttachData")
@interface C3AttachData : NSObject
/**
  A collection of all owner ids for the data in this map. If an owner id exists for a given key a entry must exist in the map as well, although the opposite is not always true.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull owners;
/**
  The number of entries in the map.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger size;
/**
  All the keys in the map.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/**
  All the values in the map.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray * _Nonnull values;
/**
  Clears all the data in the map.
  Clearing the map locally will not trigger \code
  C3Component.receivedDataUpdate(_:)
  \endcode call, that only happens for remote updates.
  version:
  1.0.0
  \param ownerId The owner id to use when clearing the map.

*/
- (void)clearWithOwnerId:(NSString * _Nullable)ownerId;
/**
  Deletes an existing value of the corresponding key.
  Deleting a local value will not trigger \code
  C3Component.receivedDataUpdate(_:)
  \endcode call, that only happens for remote updates.
  version:
  1.0.0
  <ul>
    <li>
      ownerId:       The owner id to use when deleting the value.
    </li>
  </ul>
  \param key The key to delete the value for.

*/
- (void)delete:(NSString * _Nonnull)key ownerId:(NSString * _Nullable)ownerId;
/**
  Returns the value for the given key.
  version:
  1.0.0
  \param key The key to look for.


  returns:
  The value for the given key or nil if the key does not exist.
*/
- (id _Nullable)get:(NSString * _Nonnull)key;
/**
  Returns true if there is an entry for the given key.
  version:
  1.0.0
  \param key The key to look for.


  returns:
  True if there is an entry for the given key.
*/
- (BOOL)has:(NSString * _Nonnull)key;
/**
  Sets set value for the given key, along with an ownership id.
  Setting the ownership allows data to be transparently overridden by users that are joining or rejoining the data synchronization network. Usually the ownerId will be set to the id of the user, but it can sometimes be useful to use other values, such as the role of the user, e.g. \code
  "moderator"
  \endcode.
  Since values can be updated while a call is not connected, the values that are set when disconnected may be updated once you are connected with the rest of the users. When relaying some kind of state to other peers this can cause problems, as the updates that you sent out before a reconnect will cause an update to your local values. By tagging data with an owner id, it is possible to rejoin a data synchronization group and transparently update your exsting values with the new state, without causing a local update to trigger.
  Setting a local value will not trigger \code
  C3Component.receivedDataUpdate(_:)
  \endcode call, that only happens for remote updates.
  version:
  1.0.0
  \param value The value to set.

  \param key The key of the value.

  \param ownerId The owner id to use when setting the value.

*/
- (void)set:(id _Nonnull)value for:(NSString * _Nonnull)key ownerId:(NSString * _Nullable)ownerId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3AttachData (SWIFT_EXTENSION(C3Lib))
@end


@interface C3AttachData (SWIFT_EXTENSION(C3Lib))
@end

@class C3Peer;

/**
  A class which provides an interface for components that are attached to a call or conference. Should not be constructed directly.
  The lifetime of the attach point is tied to the attachment of the component. The attach point can only be accessed while the components is attached to something, if it isn’t an error will be thrown.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib13C3AttachPoint")
@interface C3AttachPoint : NSObject
/**
  Data that is synchronized between all peers.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3AttachData * _Nullable data;
/**
  The identitfy of the own user, this will always be equal to what other users will see as the peerId. This is usually equal to the userId, but that is not guaranteed.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull ownId;
/**
  A map of remote peers that we can interact with. Only peers we have an active connection to and who have mounted a compatible component to the same point will be visible in this collection.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, C3Peer *> * _Nonnull peers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3AttachPoint (SWIFT_EXTENSION(C3Lib))
@end

@class C3AuthInfo;

/**
  Represents a step in an authentication flow. Currently all authenication flows only use a single step, so this class is used as a namespace for static atuhentication functions.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib6C3Auth")
@interface C3Auth : NSObject
+ (void)initialize SWIFT_METHOD_FAMILY(none);
/**
  Register a new account with a generated username. This should primarily be used for testing.
  A password can optionally be added to the account.
  version:
  1.0.0
  \param password The password to use for the account.

  \param serverUrl The absolute url of the home server.

  \param success The callback to be executed upon successful login. Receives authentication info. Can be nil.

  \param failure The callback to be executed upon failed login. Receives failure cause. Can be nil.

*/
+ (void)anonymousWithPassword:(NSString * _Nonnull)password serverUrl:(NSString * _Nonnull)serverUrl success:(void (^ _Nullable)(C3AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Authenticate as a guest user with a generated user id. Guest accounts are limited to a subset of the functionality of full acounts.
  At the moment guests are only allowed to join rooms where \code
  C3Room.guestAccess
  \endcode has been set to \code
  C3GuestAccessRule.open
  \endcode. They are not allowed to modify the state of a room, but can send messages and setup calls.
  Guests are also not able to set their avatar or status, but they can set their display name.
  version:
  1.0.0
  \param serverUrl The absolute url of the home server.

  \param success The callback to be executed upon successful login. Receives authentication info. Can be nil.

  \param failure The callback to be executed upon failed login. Receives failure cause. Can be nil.

*/
+ (void)guestWithServerUrl:(NSString * _Nonnull)serverUrl success:(void (^ _Nullable)(C3AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Login a user using username and password.
  version:
  1.0.0
  \param username The username.

  \param password The password.

  \param serverUrl The absolute url of the home server.

  \param success The callback to be executed upon successful login. Receives authentication info. Can be nil.

  \param failure The callback to be executed upon failed login. Receives failure cause. Can be nil.

*/
+ (void)loginAs:(NSString * _Nonnull)username password:(NSString * _Nonnull)password serverUrl:(NSString * _Nonnull)serverUrl success:(void (^ _Nullable)(C3AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Register a new user.
  A registration secret should be used iff the server is configured to only allow registration using a secret token. The secret token is used to compute an HMAC and is not sent to the server.
  version:
  1.0.0
  \param username The username.

  \param password The password.

  \param secret Shared registration secret. Can be nil.

  \param serverUrl The absolute url of the home server.

  \param success The callback to be executed upon successful registration. Receives authentication info. Can be nil.

  \param failure The callback to be executed upon failed registration. Receives failure cause. Can be nil.

*/
+ (void)registerAs:(NSString * _Nonnull)username password:(NSString * _Nonnull)password secret:(NSString * _Nullable)secret serverUrl:(NSString * _Nonnull)serverUrl success:(void (^ _Nullable)(C3AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Set a new password using an existing login session and the old password.
  version:
  1.0.0
  \param authInfo Auth info object.

  \param oldPassword Old password.

  \param newPassword New password.

  \param success The callback to be executed upon successful reset. Receives authentication info. Can be nil.

  \param failure The callback to be executed upon failed reset. Receives failure cause. Can be nil.

*/
+ (void)resetPasswordFor:(C3AuthInfo * _Nonnull)authInfo oldPassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword success:(void (^ _Nullable)(C3AuthInfo * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  An object containing the necessary information to connect and authenticate to a server.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib10C3AuthInfo")
@interface C3AuthInfo : NSObject
/**
  Deserializes auth info object from its JSON representation.
  version:
  1.0.0
  \param json JSON representation to deserialize from.


  returns:
  Deserialized object or nil if if was deserialization failed.
*/
+ (C3AuthInfo * _Nullable)fromRaw:(NSDictionary<NSString *, id> * _Nonnull)json;
/**
  Serializes auth info object to its JSON representation.
  version:
  1.0.0

  returns:
  JSON representation of the auth info object.
*/
- (NSDictionary<NSString *, id> * _Nonnull)toRaw;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class C3Component;
enum C3ConnectionState : NSInteger;
@class C3User;
@class C3Room;
@class C3MediaTee;
@class C3MediaNode;

/**
  A WebRTC call to a single peer.
  The call only manages the connection to a single peer.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      closed
      \endcode: Emitted when the call is closed. Closing the call is permanent, and removes it from the active calls in a room. Receives \code
      C3CallClosedInfo
      \endcode instance.
    </li>
    <li>
      \code
      error
      \endcode:  Emitted when an error occurs in any part of the call setup chain. Receives \code
      Error
      \endcode instance.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib6C3Call")
@interface C3Call : C3EventEmitter
/**
  A object containing all the attachments of the call.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3Component *> * _Nonnull attachments;
/**
  Whether the call is closed or not. A closed call cannot be started again.
  version:
  1.0.0
*/
@property (nonatomic, readonly) BOOL isClosed;
/**
  The state of the signalling channel, \code
  true
  \endcode if the channel is open, \code
  false
  \endcode otherwise.
  version:
  1.0.0
*/
@property (nonatomic, readonly) BOOL isConnected;
/**
  The connection state of the call.
  version:
  1.0.0
*/
@property (nonatomic, readonly) enum C3ConnectionState connectionState;
/**
  The id of the call.
  This is not guaranteed to be constant, as it can be changed due to negotiation conflicts. If the id is changed, an \code
  id
  \endcode event will be emitted.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/**
  The peer that the call is connecting to.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3User * _Nullable peer;
/**
  The room that the call is taking place in.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3Room * _Nonnull room;
/**
  Whether the call is stopped or not. The initial state of incoming calls is stopped, and calls will also transition to the stopped state if the connection has failed.
  version:
  1.0.0
*/
@property (nonatomic, readonly) BOOL isStopped;
/**
  Returns an output that represents a remote source with a specific name.
  This method is guaranteed to always return an output, unless the call is closed. If there is no remote source with the given name, it will be created.
  Under the hood this method will ensure that a peer media pipe component is attached to the given point.
  version:
  1.0.0
  \param name The name of the remote source to return.


  returns:
  An output that forwards the remote stream.
*/
- (C3MediaTee * _Nonnull)remoteSource:(NSString * _Nonnull)name;
/**
  Sets or removes a local media source that will be streamed to the peer.
  Under the hood this method will ensure that a media pipe component is attached to the given point.
  version:
  1.0.0
  \param source The media source.

  \param name The name of the stream, e.g. ‘main’.

*/
- (void)setLocalSource:(C3MediaNode * _Nonnull)source as:(NSString * _Nonnull)name;
/**
  Attaches a component to the call. If the peer attaches a compatible component to the same attachment point, the two components will be paired together.
  A common use case is for two peers to each attach a data share to \code
  "data
  \endcode”. Once the call has connected, both peers will be able to use the attached data share to share data.
  The attachment point name can be any string, although excessively long names should be avoided.
  This method can be called at any point during a call, but will have no effect if the call is closed.
  version:
  1.0.0
  \param component A component instance to attach.

  \param name The attachment point where the component should be attached.

*/
- (void)attach:(C3Component * _Nonnull)component as:(NSString * _Nonnull)name;
/**
  Detaches the component currently attached to the given attachment point. If no component is currently attached, an error will be thrown. If the component argument is given and it does not match the currently attached component, an error will be thrown.
  This method can be called at any point during a call, but will have no effect if the call is closed.
  version:
  1.0.0
  \param component A component instance that is expected to be attached at the point.

  \param name The attachment point from where the component should be detached.

*/
- (void)detach:(C3Component * _Nonnull)component from:(NSString * _Nonnull)name;
/**
  Starts an incoming call, or resumes the call if it was previously stopped.
  version:
  1.0.0
*/
- (void)start;
/**
  Stop the call without signalling to the peer. The peer will percieve this as if the connection was lost. If the connection to the peer is lost, the call will be stopped automatically.
  When the call is stopped the connection to the peer will be lost, but all components will stay attached. This makes it possible to resume the call with the current state using \code
  C3Call.start()
  \endcode.
  version:
  1.0.0
*/
- (void)stop;
/**
  Abruptly close the call without signaling to the peer.
  When a call is hung up all components will be detached, and all resources cleaned up. It will not be possible to start the call again.
  version:
  1.0.0
*/
- (void)close;
/**
  Signal to the peer that the call is has been hung up, and then stop the call.
  When a call is hung up all components will be detached, and all resources cleaned up. It will not be possible to start the call again.
  version:
  1.0.0
  \param success The callback to be executed upon successful hangup. Receives closed call instance. Can be nil.

  \param failure The callback to be executed upon failed hangup. Receives failure cause. Can be nil.

*/
- (void)hangupWithSuccess:(void (^ _Nullable)(C3Call * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3Call (SWIFT_EXTENSION(C3Lib))
@end


@interface C3Call (SWIFT_EXTENSION(C3Lib))
@end

enum C3CallClosedReason : NSInteger;
enum C3CallClosedSource : NSInteger;

/**
  Information about who closed the call and how.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib16C3CallClosedInfo")
@interface C3CallClosedInfo : NSObject
/**
  The call that was closed
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3Call * _Nonnull call;
/**
  An identifier for the reason that the call closed.
  version:
  1.0.0
*/
@property (nonatomic, readonly) enum C3CallClosedReason reason;
/**
  Who caused the call to close.
  version:
  1.0.0
*/
@property (nonatomic, readonly) enum C3CallClosedSource source;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  An identifier for the reason that the call closed.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3CallClosedReason) {
/**
  The call was closed locally.
  version:
  1.0.0
*/
  C3CallClosedReasonClosed = 0,
/**
  Someone hangs up the call, can be caused by both parties.
  version:
  1.0.0
*/
  C3CallClosedReasonHangup = 1,
};

/**
  Who caused the call to close.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3CallClosedSource) {
/**
  The call was closed locally.
  version:
  1.0.0
*/
  C3CallClosedSourceSelf = 0,
/**
  The call was closed by the peer.
  version:
  1.0.0
*/
  C3CallClosedSourcePeer = 1,
};

/**
  The position of the camera used to capture video.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3CameraPosition) {
/**
  Use front facing camera.
  version:
  1.0.0
*/
  C3CameraPositionFront = 0,
/**
  Use back facing camera.
  version:
  1.0.0
*/
  C3CameraPositionBack = 1,
/**
  Device doesn’t have a camera.
  version:
  1.0.0
*/
  C3CameraPositionNone = 2,
};

enum C3ClientConnectionState : NSInteger;
@class C3IceServer;
enum C3RoomVisibility : NSInteger;
@class C3RoomQuery;
enum C3ImageResizeMethod : NSInteger;
enum C3UserPresence : NSInteger;
@class C3ImageResource;
@class C3ImageUpload;

/**
  Represents a client.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      event:<type>
      \endcode: Same as \code
      event
      \endcode, but listens to a specific event type.
    </li>
    <li>
      \code
      call
      \endcode:         Emitted when there is an incoming call to any room. Incoming calls are stopped and need to be started with call’s \code
      start()
      \endcode before a connection is set up. Receives \code
      C3Call
      \endcode instance.
    </li>
    <li>
      \code
      event
      \endcode:        Emitted when an event is received in any room. Receives \code
      C3Event
      \endcode instance.
    </li>
    <li>
      \code
      invite
      \endcode:       Emitted when a new room invite is received. The room will contain additional information, such as \code
      invitedBy
      \endcode. Receives \code
      C3Room
      \endcode instance.
    </li>
    <li>
      \code
      rooms
      \endcode:        Emitted whenever the list of rooms changes.
    </li>
    <li>
      \code
      state
      \endcode:        Emitted when the conneciton state of the client is changed.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib8C3Client")
@interface C3Client : C3EventEmitter
/**
  The authenticated user.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3User * _Nullable user;
/**
  All rooms the authenticated user is a member of.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3Room *> * _Nonnull rooms;
/**
  The authentication information for the authenticated user.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3AuthInfo * _Nullable authInfo;
/**
  The state of the client.
  version:
  1.0.0
*/
@property (nonatomic, readonly) enum C3ClientConnectionState state;
/**
  Account data object that is used to access user scoped account data.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3AccountData * _Nullable accountData;
/**
  Creates an instance of client.
  version:
  1.0.0

  returns:
  Initialized client instance.
*/
- (nonnull instancetype)init;
/**
  Creates an instance of client.
  version:
  1.0.0
  \param iceServerUrls One or more helper servers to use as default for all calls.


  returns:
  Initialized client instance.
*/
- (nonnull instancetype)initWithIceServerUrls:(NSArray<NSString *> * _Nonnull)iceServerUrls;
/**
  Creates an instance of client.
  version:
  1.0.0
  \param iceServers One or more helper servers to use as default for all calls.


  returns:
  Initialized client instance.
*/
- (nonnull instancetype)initWithIceServers:(NSArray<C3IceServer *> * _Nonnull)iceServers OBJC_DESIGNATED_INITIALIZER;
/**
  Authenticates the client using authentication information that has been obtained in some way, usually using \code
  C3Auth
  \endcode.
  version:
  1.0.0
  \param success The callback to be executed upon successful authentication. Receives authenticated client instance. Can be nil.

  \param failure The callback to be executed upon failed authentication. Receives failure cause. Can be nil.

*/
- (void)auth:(C3AuthInfo * _Nonnull)authInfo success:(void (^ _Nullable)(C3Client * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Get a user by id.
  If the user information is not available locally, this method will return nil.
  This method can be used without being authenticated.
  version:
  1.0.0
  \param id The id of the user to retrieve.


  returns:
  The user, or nil if the user information is not available locally of the user doesn’t exist.
*/
- (C3User * _Nullable)userWithId:(NSString * _Nonnull)id;
/**
  Get a user by id.
  This method will always result in a request to the server, regardless of what information is already available. The request fetches the current name and avatar of the user.
  If the user does not exist on ther server, the returned promise will be rejected.
  This method can be used without being authenticated.
  version:
  1.0.0
  \param id The id of the user to fetch.


  returns:
  The user, or nil if the user doesn’t exist.
*/
- (void)fetchUserWithId:(NSString * _Nonnull)id success:(void (^ _Nullable)(C3User * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Create a new room.
  version:
  1.0.0
  \param name The display name of the room.

  \param alias A local alias for the room id.

  \param topic The topic to display for the room.

  \param visibility Room visibility.

  \param invite Optional list of users to invite to the room.

  \param success The callback to be executed upon successful creation. Receives new room instance. Can be nil.

  \param failure The callback to be executed upon failed creation. Receives failure cause. Can be nil.

*/
- (void)createRoomWithName:(NSString * _Nullable)name alias:(NSString * _Nullable)alias topic:(NSString * _Nullable)topic visibility:(enum C3RoomVisibility)visibility invite:(NSArray<C3User *> * _Nonnull)users success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Create a room query.
  version:
  1.0.0
  \param mapFunction The map function of the room query, see \code
  C3RoomQuery
  \endcode.


  returns:
  A newly created room query
*/
- (C3RoomQuery * _Nonnull)createRoomQueryWithMapFunction:(id _Nullable (^ _Nonnull)(C3Room * _Nonnull))mapFunction;
/**
  Get a room by id.
  This method always returns a room, but the room might be private or nonexistent, in which case any attempt to join the room will fail.
  version:
  1.0.0
  \param id The id of the room.


  returns:
  The room, or nil if the room doesn’t exist.
*/
- (C3Room * _Nullable)roomWithId:(NSString * _Nonnull)id;
/**
  Retreive a room by id, and fail if it doesn’t exist.
  If one can be certain that the room id points to a valid room, it is usually better to use \code
  C3Client.room(withId:)
  \endcode instead. This method should be used if the room id is received e.g. via user input, and it’s required to check if the room exists before trying to join it.
  version:
  1.0.0
  \param id The id of the room.

  \param success The callback to be executed upon successful fetch. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed fetch. Receives failure cause. Can be nil.

*/
- (void)fetchRoomWithId:(NSString * _Nonnull)id success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Look up and retrieve a room by alias.
  version:
  1.0.0
  \param alias he alias of the room.

  \param success The callback to be executed upon successful fetch. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed fetch. Receives failure cause. Can be nil.

*/
- (void)fetchRoomWithAlias:(NSString * _Nonnull)alias success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Parses a mxc resource URI.
  version:
  1.0
  \param uri The mxc resource URI to parse.


  returns:
  Parsed URL string.
*/
- (NSString * _Nonnull)parseResourceUri:(NSString * _Nonnull)uri;
/**
  Generates a thumbnail uri for the image resource.
  version:
  1.0.0
  \param resourceUri The resource uri to generate a thumbnail for.

  \param width The request width of the thumbnail.

  \param height The request height of the thumbnail.

  \param resizeMethod The method used for resizing the image.


  returns:
  Thumbnail url or nil if the client this image resource is associated with has been closed.
*/
- (NSString * _Nullable)thumbnailOf:(NSString * _Nonnull)resourceUri width:(float)width height:(float)height resizeMethod:(enum C3ImageResizeMethod)resizeMethod;
/**
  Set the avatar of the authenticated user.
  Typical usage is to first upload an image file using \code
  C3Client.uploadMedia(_:ofType:success:failure:)
  \endcode, and then setting it as the avatar.
  There is no guarantee that client.user.avatar will be up to date if and when the returned promise is resolved. UI updates to reflect the new avatar should instead be triggered by the \code
  avatar
  \endcode event of the user.
  version:
  1.0.0
  \param avatar A new avatar url, or nil.

  \param success The callback to be executed upon successful set. Receives client instnace. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setAvatar:(NSString * _Nullable)avatar success:(void (^ _Nullable)(C3Client * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Set the name of the authenticated user.
  There is no guarantee that client.user.name will be up to date if and when the returned promise is resolved. UI updates to reflect the new name should instead be triggered by the \code
  name
  \endcode event of the user.
  version:
  1.0.0
  \param name A new name, or nil.

  \param success The callback to be executed upon successful set. Receives client instnace. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setName:(NSString * _Nonnull)name success:(void (^ _Nullable)(C3Client * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets the status of the authenticated user.
  version:
  1.0.0
  \param status The presence type to set.

  \param message A status message to display to other users.

  \param success The callback to be executed upon successful set. Receives client instnace. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setStatus:(enum C3UserPresence)status message:(NSString * _Nullable)message success:(void (^ _Nullable)(C3Client * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Uploads media data to the server.
  If a mime type is specified it will always be used. If not, it falls back to \code
  application/octet-stream
  \endcode.
  version:
  1.0.0
  \param data The data to upload.

  \param mimeType Mime type of the data to upload.

  \param success The callback to be executed upon successful upload. Receives image resource representation of the uploaded media. Can be nil.

  \param failure The callback to be executed upon failed upload. Receives failure cause. Can be nil.


  returns:
  Image media upload representation.
*/
- (C3ImageUpload * _Nullable)uploadMedia:(NSData * _Nonnull)data ofType:(NSString * _Nonnull)mimeType success:(void (^ _Nullable)(C3ImageResource * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Forgets the auth session and resets the client state.
  version:
  1.0.0
*/
- (void)logout;
@end


@interface C3Client (SWIFT_EXTENSION(C3Lib))
@end

/**
  The connection state of the client.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3ClientConnectionState) {
/**
  version:
  1.0.0
*/
  C3ClientConnectionStateInactive = 0,
/**
  The client is connecting.
  version:
  1.0.0
*/
  C3ClientConnectionStateConnecting = 1,
/**
  The client is connected.
  version:
  1.0.0
*/
  C3ClientConnectionStateConnected = 2,
/**
  The client is disconnected.
  version:
  1.0.0
*/
  C3ClientConnectionStateDisconnected = 3,
};

@class RTCDataChannel;
@class C3DataUpdate;

/**
  A base class for components that can be attached to Calls.
  Subclasses have a number of lifecycle methods that can be overriden to implement actions during various parts of a call.
  Components that are attached will be able to interact with other remote components, as long as the components are compatible. An example is two users in a call that both attach a data share component to the same point. The two data shares will then synchronize data, as long as the calls are connected.
  The purpose of the \code
  C3Component.label
  \endcode and \code
  C3Component.remoteLabel
  \endcode configuration is to make sure that components are compatible before connecting. A component is compatible with another component if the label is equal to the remote label, or match in the case where the remote label is a regular expression. If components are not compatible they will not be connected, so the peer will not show up in the \code
  C3AttachPoint.peers
  \endcode collection.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib11C3Component")
@interface C3Component : C3EventEmitter
/**
  The label that remote components will be matched against. Only components with matching labels can interact with each other.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/**
  The expected remote component label, defaults to the own label.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nullable remoteLabel;
/**
  Returns the current attachment point. This should only be accessed from within the component implementation. Will be nil if you try to access this member when the component is not attached.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3AttachPoint * _Nullable attachPoint;
/**
  Creates an instance of component.
  version:
  1.0.0
  \param label The label that remote components will be matched against. Only components with matching labels can interact with each other.

  \param remoteLabel The expected remote component label, defaults to the own label.


  returns:
  Initialized component instance.
*/
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel OBJC_DESIGNATED_INITIALIZER;
/**
  This method is called whenever a peer is added to the \code
  C3AttachPoint.peers
  \endcode collection of the attach point.
  Only peers to who we have an active connection and who have mounted a matching component will be visible.
  This method will always be followed by a call to \code
  C3Component.lostPeer(_:)
  \endcode for the given peer. It will also only ever be called while the component is attached.
  version:
  1.0.0
  \param peer The added peer.

*/
- (void)receivedPeer:(C3Peer * _Nonnull)peer;
/**
  This method is called whenever a peer is removed from the \code
  C3AttachPoint.peers
  \endcode collection of the attach point.
  This will happen when the connection to a peer is lost, the peer detaches their component, or when the local component is detached.
  This method will always preceeded by a call to \code
  C3Component.receivedPeer(_:)
  \endcode for the given peer. It will also only ever be called while the component is attached.
  version:
  1.0.0
  \param peer The peer that was lost.

*/
- (void)lostPeer:(C3Peer * _Nonnull)peer;
/**
  This method is called whenever a peer opens a data channel. The channel will be ready to use as soon as this method is called.
  When this method is called the channel will already have been added to the collection returned by \code
  C3Peer.remoteChannels
  \endcode property.
  This method will only be called for active peers, which means that it is always happens after the \code
  C3Component.receivedPeer(_:)
  \endcode call for a peer, and before \code
  C3Component.lostPeer(_:)
  \endcode. It will also only ever be called while the component is attached.
  version:
  1.0.0
  \param channel The opened data channel.

  \param peer The peer that created the channel.

*/
- (void)receivedChannel:(RTCDataChannel * _Nonnull)channel peer:(C3Peer * _Nonnull)peer;
/**
  A overridable method that is called when the component is about to be attached to something. When this method is called, \code
  C3Component.attachPoint
  \endcode will not yet have been set, but the attachment point can be accessed through the parameter.
  If this method throws an error, the component will fail to attach. The error will be caught and handled by logging an error, but the program flow will continue.
  This method will always the followed by a call to \code
  C3Component.willDetach()
  \endcode.
  version:
  1.0.0
  \param attachPoint The point that the component will be attached to.

*/
- (void)willAttach:(C3AttachPoint * _Nonnull)attachPoint;
/**
  Called before the component is detached. Once this method has returned the attachPoint will no longer be valid, and any attempt to call a method on the attach point will throw an error.
  This method will always the preceeded by a call to \code
  C3Component.willAttach(_:)
  \endcode.
  version:
  1.0.0
*/
- (void)willDetach;
/**
  This method is called whenever an update to this component’s data occurs.
  This method will only be called for active peers, which means that it is always happens after the \code
  C3Component.receivedPeer(_:)
  \endcode call for a peer, and before \code
  C3Component.lostPeer(_:)
  \endcode. It will also only ever be called while the component is attached.
  version:
  1.0.0
  \param update The received update.

*/
- (void)receivedDataUpdate:(C3DataUpdate * _Nonnull)update;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  The connection state of the call.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3ConnectionState) {
/**
  The connection is in the signaling state, e.i. waiting for offer or answer.
  version:
  1.0.0
*/
  C3ConnectionStateSignaling = 0,
/**
  The signaling has been completed and the connection is being set up.
  version:
  1.0.0
*/
  C3ConnectionStateConnecting = 1,
/**
  Connected to the peer.
  version:
  1.0.0
*/
  C3ConnectionStateConnected = 2,
/**
  The connection has been temporarily lost but might recover.
  version:
  1.0.0
*/
  C3ConnectionStateReconnecting = 3,
/**
  The container of the connection has been closed, i.e. the conference, call, etc.
  version:
  1.0.0
*/
  C3ConnectionStateClosed = 4,
};


/**
  A component that allows data to be synchronized between all peers.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      update
      \endcode:       Emitted whenever any entry in the map is added, changed, or removed. Events are emitted for both local and remote updates. Receives \code
      C3DataUpdate
      \endcode instance.
    </li>
    <li>
      \code
      update:<key>
      \endcode: Emitted whenever a specific entry in the map is added, changed, or removed. Receives \code
      C3DataUpdate
      \endcode instance. Events are emitted for both local and remote updates. The \code
      <key>
      \endcode part of the event name should be replaced with the key you want to listen for, i.e. to listen for the entry for \code
      position
      \endcode to change, you should listen to the \code
      update:position
      \endcode event.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib11C3DataShare")
@interface C3DataShare : C3Component
/**
  The number of entries in the map.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger size;
/**
  Returns all the keys in the map.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/**
  Creates an intance of data share.
  version:
  1.0.0
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Clears all entries from the map.
  Clearing the map locally will cause an update event to be emitted for every entry. The update event does not get emitted synchronously, but is instead scheduled in a microtask.
  version:
  1.0.0
*/
- (void)clear;
/**
  Deletes the entry for a given key.
  Deleting a local entry will cause an update event to be emitted for that key. The update event does not get emitted synchronously, but is instead scheduled in a microtask.
  version:
  1.0.0
  \param key The key of the entry to delete.

*/
- (void)delete:(NSString * _Nonnull)key;
/**
  Returns the value for the given key.
  version:
  1.0.0
  \param key The key of the value to retrive.


  returns:
  The value for the given key or nil if the key does not exist.
*/
- (id _Nullable)get:(NSString * _Nonnull)key;
/**
  Returns true if there is an entry for the given key.
  version:
  1.0.0
  \param key The key to look for.


  returns:
  True if there is an entry for the given key.
*/
- (BOOL)has:(NSString * _Nonnull)key;
/**
  Sets set value for the given key.
  Setting a local value will cause an update event to be emitted for that key. The update event does not get emitted synchronously, but is instead scheduled in a microtask.
  version:
  1.0.0
  \param value The value to set.

  \param key The key of the value.

*/
- (void)set:(id _Nonnull)value for:(NSString * _Nonnull)key;
- (void)receivedDataUpdate:(C3DataUpdate * _Nonnull)update;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel SWIFT_UNAVAILABLE;
@end


/**
  The data update emitted as event payload.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib12C3DataUpdate")
@interface C3DataUpdate : NSObject
/**
  The key whose value was changed.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/**
  The new value that the key is now associated with.
  version:
  1.0.0
*/
@property (nonatomic, readonly) id _Nullable value;
/**
  The value that the key was previously associated with, if any.
  version:
  1.0.0
*/
@property (nonatomic, readonly) id _Nullable oldValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A base class that all pure media nodes inherit from.
  Classes inheriting from media node are plain nodes with input and output ports directly attached.
  A media node has zero or more input and output ports, which can be connected to other nodes. Media nodes are always connected from one output port to one input port, using the connect method of either the output port or the media node.
  When using the connect method of a media node, the output port to be used is resolved by recursively looking up the output property of the media node. The same method is used when a media node is used as the target for a connection, but in that case an input port is looked up via the input property.
  Because the input and output property lookups are recursive, it is easy to create simple container nodes that have a number of internal media nodes, and then expose input and output ports as properties.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib11C3MediaNode")
@interface C3MediaNode : C3EventEmitter
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Connect the node to a target. Each output can be connected to multiple targets.
  version:
  1.0.0
  \param target The target input, node, or element.

*/
- (void)connectTo:(id _Nonnull)target;
/**
  Disconnect the node from a target.
  If no target is specified, all targets will be disconnected.
  version:
  1.0.0
  \param target The target to disconnect from.

*/
- (void)disconnectFrom:(id _Nullable)target;
- (void)close;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A media source that streams from user media devices.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      error
      \endcode:  Emitted if a stream could not be acquired. Receives \code
      Error
      \endcode instance. The node will only ever emit one of the \code
      stream
      \endcode and \code
      error
      \endcode events, and only once.
    </li>
    <li>
      \code
      stream
      \endcode: Emitted when the stream has been acquired. Receives \code
      RTCMediaStream
      \endcode instance. The node will only ever emit one of the \code
      stream
      \endcode and \code
      error
      \endcode events, and only once.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib14C3DeviceSource")
@interface C3DeviceSource : C3MediaNode
/**
  Toggles muting of the audio.
  version:
  1.0.0
*/
@property (nonatomic) BOOL muteAudio;
/**
  Toggles muting of the video.
  version:
  1.0.0
*/
@property (nonatomic) BOOL muteVideo;
/**
  Toggles muting of the media.
  When assigning to the property, both audio and video will be updated.
  version:
  v.0.0
  <h1>Example</h1>
  \code
  let source = C3DeviceSource()

  // both at once
  source.mute = true

  // directly
  source.muteVideo = true

  \endcode*/
@property (nonatomic) BOOL mute;
@property (nonatomic) enum C3CameraPosition cameraPosition;
/**
  Creates an instance of device source.
  version:
  1.0.0
  \param audio Set to \code
  true
  \endcode if audio is desired.

  \param video Set to \code
  true
  \endcode if video is desired.


  returns:
  Initialized device source instance.
*/
- (nonnull instancetype)initWithAudio:(BOOL)audio video:(BOOL)video OBJC_DESIGNATED_INITIALIZER;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3DeviceSource (SWIFT_EXTENSION(C3Lib))
@end


/**
  The event generated in the room
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib7C3Event")
@interface C3Event : NSObject
/**
  The room to which the event belongs.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3Room * _Nonnull room;
/**
  The user who triggered the event.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3User * _Nonnull sender;
/**
  The id of the event.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/**
  The content of the event.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull content;
/**
  The old content of the event, if any.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable oldContent;
/**
  The type of the event.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/**
  True if the event has been generated by the currently logged in user, false otherwise.
  version:
  1.0.0
*/
@property (nonatomic, readonly) BOOL isOwnEvent;
/**
  The timestamp indicating the date the event has been generated.
*/
@property (nonatomic, readonly) NSTimeInterval timeInterval;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



@interface C3EventEmitter (SWIFT_EXTENSION(C3Lib))
@end

enum C3MessageType : NSInteger;

SWIFT_CLASS("_TtC5C3Lib9C3Message")
@interface C3Message : NSObject
@property (nonatomic, readonly) enum C3MessageType type;
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
+ (C3Message * _Nullable)fromEvent:(C3Event * _Nonnull)event;
- (nonnull instancetype)init:(NSString * _Nonnull)body type:(enum C3MessageType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5C3Lib14C3MediaMessage")
@interface C3MediaMessage : C3Message
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)init:(NSString * _Nonnull)url body:(NSString * _Nullable)body type:(enum C3MessageType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)body type:(enum C3MessageType)type SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5C3Lib13C3FileMessage")
@interface C3FileMessage : C3MediaMessage
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull info;
- (nonnull instancetype)init:(NSString * _Nonnull)url body:(NSString * _Nullable)body info:(NSDictionary<NSString *, id> * _Nonnull)info OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)url body:(NSString * _Nullable)body type:(enum C3MessageType)type SWIFT_UNAVAILABLE;
@end

@class C3FileTransfer;

/**
  Represents a reference to a file, which resides either locally, or at some remote peer.
  If the file is available locally it can be accessed directly, otherwise it has to be downloaded first.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      end
      \endcode:       Emitted when the file download ends, both on success and failure. Receives \code
      C3FileRefEndReason
      \endcode instance.
    </li>
    <li>
      \code
      error
      \endcode:     Emitted when the file download ends before it is completed. Receives \code
      Error
      \endcode instance.
    </li>
    <li>
      \code
      load
      \endcode:      Emitted when the file download is completed successfully. Receives \code
      C3FileRef
      \endcode instance.
    </li>
    <li>
      \code
      progress
      \endcode:  Emitted each time the progress of the file download changes. Receives \code
      Float
      \endcode instance.
    </li>
    <li>
      \code
      transfer
      \endcode:  Emitted each time a remote peer starts downloading the file. Receives \code
      C3FileTransfer
      \endcode instance.
    </li>
    <li>
      \code
      transfers
      \endcode: Emitted when the list of file transfers is changes. Receives \code
      [C3FileTransfer]
      \endcode instance.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib9C3FileRef")
@interface C3FileRef : C3EventEmitter
/**
  True if the file reference points to a local file, false otherwise.
  version:
  1.0.0
*/
@property (nonatomic, readonly) BOOL isLocal;
/**
  The name of the file.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**
  The progress of the file download in the range [0, 1].
  version:
  1.0.0
*/
@property (nonatomic, readonly) float progress;
/**
  The size of the file in bytes.
  version:
  1.0.0
*/
@property (nonatomic, readonly) uint64_t size;
/**
  The mime type of the file.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/**
  A list of ongoing transfers of the file to other peers.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3FileTransfer *> * _Nonnull transfers;
/**
  Contents of the file or nil if the file is local.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/**
  Creates a new file reference from a path.
  version:
  1.0.0
  \param path The path of a file for which to create a reference.

  \param type The type of the file.


  returns:
  A new file ref.
*/
+ (C3FileRef * _Nullable)fromPath:(NSString * _Nonnull)path type:(NSString * _Nonnull)type;
/**
  Aborts any ongoing file download. Has no effect if the file download is complete or hasn’t started.
  version:
  1.0.0
*/
- (void)abort;
/**
  Downloads the file from a remote peer. If the file has already been downloaded or the reference points to a local file, the returned promise will be immediately resolved.
  version:
  1.0.0
  \param success The callback to be executed upon successful fetch. Receives fetched file reference instance. Can be nil.

  \param failure The callback to be executed upon failed fetch. Receives failure cause. Can be nil.

*/
- (void)fetchWithSuccess:(void (^ _Nullable)(C3FileRef * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3FileRef (SWIFT_EXTENSION(C3Lib))
@end

@class RTCDataBuffer;

@interface C3FileRef (SWIFT_EXTENSION(C3Lib)) <RTCDataChannelDelegate>
- (void)dataChannelDidChangeState:(RTCDataChannel * _Nonnull)dataChannel;
- (void)dataChannel:(RTCDataChannel * _Nonnull)dataChannel didReceiveMessageWithBuffer:(RTCDataBuffer * _Nonnull)buffer;
@end

/**
  Enumeration identifying the reason the download ended.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3FileRefEndReason) {
/**
  The download finished successfully.
  version:
  1.0.0
*/
  C3FileRefEndReasonDone = 0,
/**
  The download finished with an error.
  version:
  1.0.0
*/
  C3FileRefEndReasonError = 1,
/**
  The downlaod has been aborted, either by user by calling \code
  abort()
  \endcode method or by logging out.
  version:
  1.0.0
*/
  C3FileRefEndReasonAborted = 2,
/**
  The file has been closed.
  version:
  1.0.0
*/
  C3FileRefEndReasonClosed = 3,
};


/**
  A component that allows file sharing between peers.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      update
      \endcode:       Emitted whenever any entry in the map is added, changed, or removed. Events are emitted for both local and remote updates. Receives \code
      C3DataUpdate
      \endcode instance.
    </li>
    <li>
      \code
      update:<key>
      \endcode: Emitted whenever a specific entry in the map is added, changed, or removed. Receives \code
      C3DataUpdate
      \endcode instance. Events are emitted for both local and remote updates. The \code
      <key>
      \endcode part of the event name should be replaced with the key you want to listen for, i.e. to listen for the entry for \code
      position
      \endcode to change, you should listen to the \code
      update:position
      \endcode event.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib11C3FileShare")
@interface C3FileShare : C3Component
/**
  The number of entries in the map.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger size;
/**
  All the keys in the map.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/**
  Creates an intance of file share.
  version:
  1.0.0
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Clears all entries from the map.
  Clearing the map locally will cause an update event to be emitted for every entry. The update event does not get emitted synchronously, but is instead scheduled in a microtask.
  version:
  1.0.0
*/
- (void)clear;
/**
  Deletes the entry for a given key.
  Deleting a local entry will cause an update event to be emitted for that key. The update event does not get emitted synchronously, but is instead scheduled in a microtask.
  version:
  1.0.0
  \param key The key of the entry to delete.

*/
- (void)delete:(NSString * _Nonnull)key;
/**
  Returns the file ref for the given key.
  version:
  1.0.0
  \param key The key of the file ref to retrive.


  returns:
  The value for the given key or nil if the key does not exist.
*/
- (C3FileRef * _Nullable)get:(NSString * _Nonnull)key;
/**
  Returns true if there is an entry for the given key.
  version:
  1.0.0
  \param key The key to look for.


  returns:
  True if there is an entry for the given key.
*/
- (BOOL)has:(NSString * _Nonnull)key;
/**
  Sets set file ref for the given key.
  Setting a local value will cause an update event to be emitted for that key. The update event does not get emitted synchronously, but is instead scheduled in a microtask.
  version:
  1.0.0
  \param file The value to set.

  \param key The key of the value.

*/
- (void)set:(C3FileRef * _Nonnull)file for:(NSString * _Nonnull)key;
- (void)receivedPeer:(C3Peer * _Nonnull)peer;
- (void)lostPeer:(C3Peer * _Nonnull)peer;
- (void)receivedChannel:(RTCDataChannel * _Nonnull)channel peer:(C3Peer * _Nonnull)peer;
- (void)receivedDataUpdate:(C3DataUpdate * _Nonnull)update;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel SWIFT_UNAVAILABLE;
@end


@interface C3FileShare (SWIFT_EXTENSION(C3Lib))
@end


/**
  Represents the transfer of a local file to a remote peer.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      done
      \endcode:     Emitted when the file transfer is completed successfully.
    </li>
    <li>
      \code
      end
      \endcode:      Emitted when the file transfer ends, both on success and failure. Receives \code
      C3FileRefEndReason
      \endcode instance.
    </li>
    <li>
      \code
      error
      \endcode:    Emitted when the file transfer fails. Receives \code
      Error
      \endcode instance.
    </li>
    <li>
      \code
      progress
      \endcode: Emitted each time the progress of the file transfer changes. Receives \code
      Float
      \endcode instance.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib14C3FileTransfer")
@interface C3FileTransfer : C3EventEmitter
/**
  The error that ended the file transfer, or null if the transfer hasn’t ended with an error.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSError * _Nullable error;
/**
  The progress of the file transfer, in the range [0, 1].
  version:
  1.0.0
*/
@property (nonatomic, readonly) float progress;
/**
  Aborts the file transfer, if it is still ongoing.
  version:
  1.0.0
*/
- (void)abort;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3FileTransfer (SWIFT_EXTENSION(C3Lib))
@end


@interface C3FileTransfer (SWIFT_EXTENSION(C3Lib)) <RTCDataChannelDelegate>
- (void)dataChannelDidChangeState:(RTCDataChannel * _Nonnull)dataChannel;
- (void)dataChannel:(RTCDataChannel * _Nonnull)dataChannel didReceiveMessageWithBuffer:(RTCDataBuffer * _Nonnull)buffer;
@end

/**
  The guest access rule of a room determines how guests are able to join the room.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3GuestAccessRule) {
/**
  Guests are allowed to join the room, but are still subject to the join rule of the room.
  version:
  1.0.0
*/
  C3GuestAccessRuleOpen = 0,
/**
  Guests are not allowed to join the room.
  version:
  1.0.0
*/
  C3GuestAccessRuleClosed = 1,
};

/**
  An enumeration describing the visibility rules for events in a room.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3HistoryVisibility) {
/**
  Any member of the room can read the entire history.
  version:
  1.0.0
*/
  C3HistoryVisibilityShared = 0,
/**
  Members can only read the history from the point they where invited to the room.
  version:
  1.0.0
*/
  C3HistoryVisibilityInvited = 1,
/**
  Members can only read the history from the point they joined the room.
  version:
  1.0.0
*/
  C3HistoryVisibilityJoined = 2,
/**
  All events in the room can be read by anyone, including guest accounts.
  version:
  1.0.0
*/
  C3HistoryVisibilityPublic = 3,
};


/**
  A STUN or TURN server credentials.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib11C3IceServer")
@interface C3IceServer : NSObject
/**
  A STUN or TURN server url, e.g. \code
  stun:stun.example.com
  \endcode or \code
  turn:turn.example.com
  \endcode.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/**
  The username used when accessing the helper server.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nullable username;
/**
  The password associated with the username.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nullable password;
/**
  Creates an instance of ICE server.
  version:
  1.0.0
  \param url A STUN or TURN server url.

  \param username The username user when accessing the helper server.

  \param password The password associated with the username.


  returns:
  Initialized ICE server instance.
*/
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url username:(NSString * _Nullable)username password:(NSString * _Nullable)password OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  The image resize method enumeration.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3ImageResizeMethod) {
/**
  Image will be scaled.
  version:
  1.0.0
*/
  C3ImageResizeMethodScale = 0,
/**
  Image will be cropped.
  version:
  1.0.0
*/
  C3ImageResizeMethodCrop = 1,
};


/**
  Represents a server-side image resource.
  This class provides a link to an image, as well as the possibility to thumbnail the image.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib15C3ImageResource")
@interface C3ImageResource : NSObject
/**
  The uri to the image.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/**
  The original resource uri of the resource, of the form \code
  "mxc://..."
  \endcode.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull resourceUri;
/**
  Generates a thumbnail uri for the image resource.
  version:
  1.0.0
  \param width The request width of the thumbnail.

  \param height The request height of the thumbnail.

  \param resizeMethod The method used for resizing the image.


  returns:
  Thumbnail url or nil if the client this image resource is associated with has been closed.
*/
- (NSString * _Nullable)thumbnailWithWidth:(float)width height:(float)height resizeMethod:(enum C3ImageResizeMethod)resizeMethod;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Represents a media upload.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      done
      \endcode:      Emitted when the upload has completed sucessfully.
    </li>
    <li>
      \code
      progress
      \endcode: Emitted when the progress of the upload is updated.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib13C3ImageUpload")
@interface C3ImageUpload : C3EventEmitter
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  The join rule of a room determines how users are able to join the room.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3JoinRule) {
/**
  The user can be joined by anyone that has the room id or an alias of the room.
  version:
  1.0.0
*/
  C3JoinRuleOpen = 0,
/**
  Only allows users to join after first being invited to the room by an existing member.
  version:
  1.0.0
*/
  C3JoinRuleInvite = 1,
};

@class C3MediaNodeInput;
@class C3MediaNodeOutput;
@class RTCMediaStream;

/**
  A base class for media nodes with a single input and a single output.
  The subclass should override the \code
  C3MediaFilter.onStream(_:_:)
  \endcode method, and assign to \code
  C3MediaFilter.stream
  \endcode to update the output stream.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib13C3MediaFilter")
@interface C3MediaFilter : C3MediaNode
/**
  The input of the filter.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3MediaNodeInput * _Nonnull input;
/**
  The output of the filter.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3MediaNodeOutput * _Nonnull output;
/**
  The current output stream.
  This should only be called by the subclass implementation, and not from outside the media node.
  version:
  1.0.0
*/
@property (nonatomic, strong) RTCMediaStream * _Nullable stream;
/**
  Creates an instance of media filter.
  version:
  1.0.0
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Abstract method that is called whenever the input stream is updated, this should be overridden by the subclass.
  This will only ever be called if the stream has changed, been added, or removed, i.e. \code
  stream
  \endcode and \code
  oldStream
  \endcode will never be equal.
  The \code
  C3MediaFilter.onStream(_:_:)
  \endcode method will not be called when the backing tracks of a stream is changed. If the subclass needs to be notified of track updates this has to be done manually using the media stream listeners.
  version:
  1.0.0
  \param stream The new media stream, or nil.

  \param oldStream The old media stream, or nil.

*/
- (void)onStream:(RTCMediaStream * _Nullable)stream :(RTCMediaStream * _Nullable)oldStream;
- (void)close;
@end




@interface C3MediaNode (SWIFT_EXTENSION(C3Lib))
@end


/**
  A class which represents an input of \code
  C3MediaNode
  \endcode. Outputs are connected to inputs in order to forward media streams.
  This class should only be used within the implementation of media nodes. While it is possible to attach inputs to an existing media node, it should be avoided. Use an additional media node to implement the desired behaviour instead, such as a passthrough.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib16C3MediaNodeInput")
@interface C3MediaNodeInput : NSObject
/**
  The name of this input. This is only meaningful for inputs that belong to media nodes with multiple inputs.
  Any input that belong to one of the base media node implementations, such as MediaSink, will have the name \code
  default
  \endcode.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**
  The current target of this input.
  The input will always be set to the media node output that the input is connected to, and not the media node that the connect might have been called on.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3MediaNodeOutput * _Nullable target;
/**
  The inputs’s current media stream, or nil.
  version:
  1.0.0
*/
@property (nonatomic, strong) RTCMediaStream * _Nullable stream;
/**
  Creates an instance of media node input.
  version:
  1.0.0
  \param name The name of the input.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Resolves the input of a target. If the lookup fails, an error will be thrown.
  Inputs are resolved as follows, starting with a target:
  <ul>
    <li>
      If the current target is a media node input instance, stop and return the target.
    </li>
    <li>
      If the target is an object, set the new target to the input property of the target, and start over.
    </li>
    <li>
      Return nil.
    </li>
  </ul>
  version:
  1.0.0
  \param target The target to resolve the input of.


  returns:
  The resolved input.
*/
+ (C3MediaNodeInput * _Nullable)resolve:(id _Nonnull)target;
/**
  Detaches the input from it’s parent and removes any connection. Use this to clean up inputs in media nodes with dynamic inputs. After this method has been called the input can no longer be used.
  This method is internal and should only be called by the implementation of the parent media node.
  version:
  1.0.0
*/
- (void)detach;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A class which represents an output of \code
  C3MediaNode
  \endcode. Outputs are connected to inputs in order to forward media streams.
  This class should only be used within the implementation of media nodes. While it is possible to attach outputs to an existing media node, it should be avoided. Use an additional media node to implement the desired behaviour instead, such as a passthrough.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib17C3MediaNodeOutput")
@interface C3MediaNodeOutput : NSObject
/**
  The name of this output. This is only meaningful for outputs that belong to media nodes with multiple outputs.
  Any output that belong to one of the base media node implementations, such as \code
  C3MediaSource
  \endcode, will have the name \code
  default
  \endcode.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**
  The output’s current media stream, or nil.
  version:
  1.0.0
*/
@property (nonatomic, strong) RTCMediaStream * _Nullable stream;
/**
  A read-only set of all the current targets of the output.
  The set will only contain resolved inputs, and not the original targets given to the connect method.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3MediaNodeInput *> * _Nonnull targets;
/**
  Creates an instance of media node output.
  version:
  1.0.0
  \param name The name of the output.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  Connect this output to a target. Each output can be connected to multiple targets.
  version:
  1.0.0
  \param target The target to connect the output to.

*/
- (void)connectTo:(id _Nonnull)target;
/**
  Disconnect this output from a target.
  If no target is specified, all targets will be disconnected.
  version:
  1.0.0
  \param target The target to disconnect from. May be nil.

*/
- (void)disconnectFrom:(id _Nullable)target;
/**
  Resolves the output of a target. If the lookup fails, an error will be thrown.
  Outputs are resolved as follows, starting with a target:
  <ul>
    <li>
      If the current target is a media node output instance, stop and return the target.
    </li>
    <li>
      If the target is an object, set the new target to the output property of the target, and start over.
    </li>
    <li>
      Return nil.
    </li>
  </ul>
  version:
  1.0.0
  \param target The target to resolve the output of.


  returns:
  The resolved output.
*/
+ (C3MediaNodeOutput * _Nullable)resolve:(id _Nonnull)target;
/**
  Detaches the output from it’s parent and removes any connections. Use this to clean up outputs in media nodes with dynamic outputs. After this method has been called the input can no longer be used.
  This method is internal and should only be called by the implementation of the parent media node.
  version:
  1.0.0
*/
- (void)detach;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3MediaNodeOutput (SWIFT_EXTENSION(C3Lib))
@end


/**
  A base class for media nodes with a single input and no output. Typically used to render the stream, or as a base for nodes with multiple outputs.
  The subclass should override the \code
  onStream
  \endcode method.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib11C3MediaSink")
@interface C3MediaSink : C3MediaNode
/**
  The input.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3MediaNodeInput * _Nonnull input;
/**
  The current input stream.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) RTCMediaStream * _Nullable stream;
/**
  version:
  1.0.0
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Abstract method that is called whenever the input stream is updated, this should be overridden by the subclass.
  This will only ever be called if the stream has changed, been added, or removed, i.e. \code
  stream
  \endcode and \code
  oldStream
  \endcode will never be equal.
  The \code
  C3MediaSink.onStream(_:_:)
  \endcode method will not be called when the backing tracks of a stream is changed. If the subclass needs to be notified of track updates this has to be done manually using the media stream listeners.
  version:
  1.0.0
  \param stream The new media stream, or nil.

  \param oldStream The old media stream, or nil.

*/
- (void)onStream:(RTCMediaStream * _Nullable)stream :(RTCMediaStream * _Nullable)oldStream;
- (void)close;
@end

@class C3MuteFilter;

/**
  A simple MediaNode that can be used to expose media together with the basic utilities of emitting stream events, exposing a stream stream property, and a mute property.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      stream
      \endcode: Emitted whenever the stream is changed. Receives \code
      RTCMediaStream
      \endcode instance.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib10C3MediaTee")
@interface C3MediaTee : C3MediaNode
/**
  The input of the media tee.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3MuteFilter * _Nonnull input;
/**
  Creates an instance of media tee.
  version:
  1.0.0
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)close;
@end



@interface C3Message (SWIFT_EXTENSION(C3Lib))
@end

typedef SWIFT_ENUM(NSInteger, C3MessageType) {
  C3MessageTypeText = 0,
  C3MessageTypeEmote = 1,
  C3MessageTypeNotice = 2,
  C3MessageTypeImage = 3,
  C3MessageTypeAudio = 4,
  C3MessageTypeVideo = 5,
  C3MessageTypeLocation = 6,
  C3MessageTypeFile = 7,
};


/**
  A media node that can mute the audio and/or video of a stream.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib12C3MuteFilter")
@interface C3MuteFilter : C3MediaFilter
/**
  Creates an instance of mute filter.
  version:
  1.0.0
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)onStream:(RTCMediaStream * _Nullable)stream :(RTCMediaStream * _Nullable)oldStream;
@end


@interface C3MuteFilter (SWIFT_EXTENSION(C3Lib))
@end


/**
  A simple identity filter that simply passes on the input stream.
  This node can e.g. be used to provide a separate output node in order to avoid losing internal connections in a node. The example below shows how a container node uses a passthrough element in order to avoid losing the connection between the filter and analyser if \code
  C3MediaNode.disconnect(from:)
  \endcode is called on the output.
  \code
                        ┌──────────┐
                      ┌─┤ Analyser │
           ┌────────┐ │ └──────────┘
   input ○─┤ Filter ├─┤
           └────────┘ │ ┌─────────────┐
                      └─┤ Passthrough ├─○ output
                        └─────────────┘

  \endcodeversion:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      stream
      \endcode: Emitted whenever the stream is changed. Receives \code
      RTCMediaStream
      \endcode instance.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib13C3Passthrough")
@interface C3Passthrough : C3MediaFilter
/**
  Creates an instance of passthrough.
  version:
  1.0.0
  \param silent If silent is set to false the node will emit a log message with log level info whenever the stream is updated.

*/
- (nonnull instancetype)initWithSilent:(BOOL)silent OBJC_DESIGNATED_INITIALIZER;
- (void)onStream:(RTCMediaStream * _Nullable)stream :(RTCMediaStream * _Nullable)oldStream;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class RTCDataChannelConfiguration;

/**
  This class provides a point of interaction with remote peers of an attached component. Peers are accessed either through \code
  C3AttachPoint.peers
  \endcode, or via the overridable methods of an attach point.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib6C3Peer")
@interface C3Peer : C3MediaNode
/**
  The id of the remote peer.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSArray<RTCDataChannel *> * _Nullable remoteChannels;
/**
  The default media input for this peer.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3MediaNodeInput * _Nonnull input;
/**
  The default media output for this peer.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3MediaNodeOutput * _Nonnull output;
/**
  Creates a new data channel to the peer.
  version:
  1.0.0
  \param label A label describing the data channel.

  \param configuration A desired channel configuration.


  returns:
  Plain RTCDataChannel or nil if it was not possible to create a channel.
*/
- (RTCDataChannel * _Nullable)createChannel:(NSString * _Nonnull)label configuration:(RTCDataChannelConfiguration * _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3Peer (SWIFT_EXTENSION(C3Lib))
@end


@interface C3Peer (SWIFT_EXTENSION(C3Lib))
@end


/**
  A simple component that allows a single media stream to be sent and received within a call. This component can only be used by calls, and will throw an error if attached to a conference.
  Media does not have to be sent both ways, i.e. the component will work even if none or just one of the peers are sending media.
  This component is usually not used directly, as it is used in the implementation of \code
  C3Call.setLocalSource(_:as:)
  \endcode and \code
  C3Call.remoteSource(_:)
  \endcode.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib15C3PeerMediaPipe")
@interface C3PeerMediaPipe : C3Component
/**
  The input for the media that will be sent to the peer.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3Passthrough * _Nonnull input;
/**
  Output for media that is sent from the peer.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3MediaTee * _Nonnull output;
/**
  Creates an instance of peer media pipe.
  version:
  1.0.0
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)receivedPeer:(C3Peer * _Nonnull)peer;
- (void)willDetach;
- (void)close;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label remoteLabel:(NSString * _Nullable)remoteLabel SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5C3Lib22C3PowerLevelsContainer")
@interface C3PowerLevelsContainer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A class which provides a fluent API for modifying a power levels object. It cannot be instantiated directly and can only be created through the static factory methods as well as \code
  C3Room.editPowerLevels()
  \endcode.
  Many methods are verbs, but they simply set the power level required to execute the matching action, with the exception of \code
  C3PowerLevelsEdit.commit
  \endcode.
  No actual action is taken until the \code
  C3PowerLevelsEdit.commit
  \endcode method is called. The commit method is only available if the instance was obtained from a \code
  C3Room.editPowerLevels()
  \endcode call. It is also possible to create an instance with one of the static factory methods and then pass the instance to \code
  C3Room.setPowerLevels(_:success:failure:)
  \endcode.
  version:
  1.0.0
  <h1>Example</h1>
  \code
  room.editPowerLevels()
      .kick(has: 60)
      .addState(has: 0)
      .user(promotedUser, has: 60)
      .event("my.customer.event", has: 20)
      .commit({
          print("Power levels updated!)
  })

  room.setPowerLevels(
      C3PowerLevelsEdit.fromDefault(client.user!),
      success: { room in
          print("Power levels reset")
  })

  \endcode*/
SWIFT_CLASS("_TtC5C3Lib17C3PowerLevelsEdit")
@interface C3PowerLevelsEdit : C3PowerLevelsContainer
/**
  Commits the current state of the power levels edit by updating the power levels of the room to the current values. This method is only present if the instance was obtained via \code
  C3Room.editPowerLevels()
  \endcode.
  <h1>Note</h1>
  Power levels can no longer be edited after successful commit. In order to perform further changes, \code
  C3Room.editPowerLevels()
  \endcode has to be called again.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) void (^ _Nullable commit)(void (^ _Nullable)(void), void (^ _Nullable)(NSError * _Nonnull));
/**
  Creates a new \code
  C3PowerLevelsEdit
  \endcode object with the default power levels.
  The creator of the room can optionally be specified, in which case the creators power level will be set to the default power level of the creator.
  version:
  1.0.0
  \param creator An optional creator of the room.


  returns:
  New instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
+ (C3PowerLevelsEdit * _Nonnull)fromDefaultFor:(C3User * _Nullable)creator;
/**
  Creates a new \code
  C3PowerLevelsEdit
  \endcode object with all power levels set to 0.
  version:
  1.0.0

  returns:
  New instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
+ (C3PowerLevelsEdit * _Nonnull)fromZero;
/**
  Sets the power level required to add a new state to the room.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)addStateWithHas:(NSInteger)level;
/**
  Sets the power level required to send an event of a specific type or set a state of the same type.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)eventWith:(NSString * _Nonnull)eventType has:(NSInteger)level;
/**
  Sets the default power level for all event types in the room. If a specific power level hasn’t been set for an event type this value will be used.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)eventDefaultWithIs:(NSInteger)level;
/**
  Sets the power level required to invite a user to the room.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)inviteWithHas:(NSInteger)level;
/**
  Sets the power level required to kick a user from the room.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)kickWithHas:(NSInteger)level;
/**
  Sets the power level required to redact and event in the room.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)redactWithHas:(NSInteger)level;
/**
  Sets the power level required to change the name of a room.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)setNameWithHas:(NSInteger)level;
/**
  Sets the power level required to change the power levels of a room.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)setPowerLevelsWithHas:(NSInteger)level;
/**
  Sets the power level required to change the topic of a room.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)setTopicWithHas:(NSInteger)level;
/**
  Sets the power level required to change the type of a room.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)setTypeWithHas:(NSInteger)level;
/**
  Sets the power level of a user.
  version:
  1.0.0
  \param user The user instance.

  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)user:(C3User * _Nonnull)user has:(NSInteger)level;
/**
  Sets the default power level for users in the room. If a specific power level hasn’t been set for a user this value will be used.
  version:
  1.0.0
  \param level The new power level requirement.


  returns:
  Current instance of \code
  C3PowerLevelsEdit
  \endcode.
*/
- (C3PowerLevelsEdit * _Nonnull)userDefaultWithIs:(NSInteger)level;
@end

@class NSNumber;

/**
  A class which provides convenience accessors for the internal representation of a power levels structure.
  This will usually be accessed through \code
  C3Room.powerLevels
  \endcode.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib19C3PowerLevelsReader")
@interface C3PowerLevelsReader : C3PowerLevelsContainer
/**
  The power level required to add a new state to a room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger addState;
/**
  The default power level for events in the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger eventDefault;
/**
  An object where the key is an event type and the value is that event type’s required power level.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull events;
/**
  The power level required to invite a user to the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger invite;
/**
  The power level required to kick a user form the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger kick;
/**
  The power level required to redact an event from the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger redact;
/**
  The power level required to set the name of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger setName;
/**
  The power level required to set the power levels in a room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger setPowerLevels;
/**
  The power level required to set the topic of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger setTopic;
/**
  The power level required to set the type of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger setType;
/**
  The default power level for users in the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly) NSInteger userDefault;
/**
  An object where the key is a userId and the value is that user’s power level.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull users;
@end

enum C3RoomMembership : NSInteger;
@class C3RoomState;

/**
  A representation of a room that users join in order to communicate.
  version:
  1.0.0
  <h1>Events</h1>
  <ul>
    <li>
      \code
      event:<type>
      \endcode:      Same as \code
      event
      \endcode, but listens to a specific event type. Receives \code
      C3Event
      \endcode instance.
    </li>
    <li>
      \code
      alias
      \endcode:             Emitted when the alias of the room changes.
    </li>
    <li>
      \code
      avatar
      \endcode:            Emitted when the avatar of the room is changed. Receives \code
      C3ImageResource
      \endcode instance or nil.
    </li>
    <li>
      \code
      call
      \endcode:              Emitted when there is an incoming call to this room. Incoming calls are stopped and need to be started with \code
      C3Call.start()
      \endcode before a connection is set up. Receives \code
      C3Call
      \endcode instance.
    </li>
    <li>
      \code
      event
      \endcode:             Emitted when a new event is triggered in the room. Will not trigger when loading old events. Receives \code
      C3Event
      \endcode instance.
    </li>
    <li>
      \code
      events
      \endcode:            Emitted when the list of events in the room change. This event does not have any parameters, the updated list of events can instead be accessed via the \code
      C3Room.events
      \endcode property.
    </li>
    <li>
      \code
      guestAccessRule
      \endcode:   Emitted when the guest access rule of the room changes. Receives \code
      C3GuestAccessRule
      \endcode instance.
    </li>
    <li>
      \code
      historyVisibility
      \endcode: Emitted when the history visibility of the room changes. Receives \code
      C3HistoryVisibility
      \endcode instance.
    </li>
    <li>
      \code
      invite
      \endcode:            Emitted when a user is invited to the room. Receives the user that was invited.
    </li>
    <li>
      \code
      invited
      \endcode:           Emitted when the invited user collection is changed. This event does not have any parameters, the updated list of users can instead be accessed via the \code
      C3Room.invited
      \endcode.
    </li>
    <li>
      \code
      join
      \endcode:              Emitted when a user joins the room. Receives the user that joined.
    </li>
    <li>
      \code
      joinRule
      \endcode:          Emitted when the join rule of the room changes. Receives \code
      C3JoinRule
      \endcode instance.
    </li>
    <li>
      \code
      leave
      \endcode:             Emitted when a user leaves the room. Receives the user.
    </li>
    <li>
      \code
      members
      \endcode:           Emitted when the members user collection is changed. This event does not have any parameters, the updated list of users can instead be accessed via the \code
      C3Room.members
      \endcode property.
    </li>
    <li>
      \code
      membership
      \endcode:        Emitted when the authenticated users membership of the room is changed. Receives \code
      C3RoomMembership
      \endcode instance.
    </li>
    <li>
      \code
      memberships
      \endcode:       Emitted when the membership of any user in the room is changed. Receives a map of users and their memberships.
    </li>
    <li>
      \code
      name
      \endcode:              Emitted when the name of the room is changed. Receives the new name.
    </li>
    <li>
      \code
      C3Room.otherMembers
      \endcode:      Emitted when the \code
      C3Room.otherMembers
      \endcode user collection is changed. This event does not have any parameters, the updated list of users can instead be accessed via the \code
      C3Room.otherMembers
      \endcode property.
    </li>
    <li>
      \code
      powerLevels
      \endcode:       Emitted when the power levels of the room change. Receives \code
      C3PowerLevelsReader
      \endcode instance.
    </li>
    <li>
      \code
      state
      \endcode:             Emitted when a state of the room is changed. Receives \code
      C3RoomState
      \endcode instance.
    </li>
    <li>
      \code
      topic
      \endcode:             Emitted when the topic of the room is changed. Receives the new topic.
    </li>
    <li>
      \code
      type
      \endcode:              Emitted when the type of the room is changed.
    </li>
    <li>
      \code
      typing
      \endcode:            Emitted when the list of users who are currently typing is changed. This event does not have any parameters, the updated list of users can instead be accessed via the \code
      C3Room.typing
      \endcode property.
    </li>
    <li>
      \code
      state:<stateType>
      \endcode: Same as \code
      C3Room.state
      \endcode, but listens to a specific state type.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib6C3Room")
@interface C3Room : C3EventEmitter
/**
  Account data object that is used to access room scoped account data.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3AccountData * _Nullable accountData;
/**
  The alias of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nullable alias;
/**
  True if all past events have been loaded.
  version:
  1.0.0
*/
@property (nonatomic, readonly) BOOL allEventsLoaded;
/**
  The current avatar of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3ImageResource * _Nullable avatar;
/**
  All active calls in the room. Each key-value pair is the other user and the call object.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSDictionary<C3User *, C3Call *> * _Nonnull calls;
/**
  The events of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3Event *> * _Nonnull events;
/**
  The id of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/**
  Users that have been invited to the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3User *> * _Nonnull invited;
/**
  The user that invited the client to the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3User * _Nullable invitedBy;
/**
  True if more events are currently being loaded in.
  version:
  1.0.0
*/
@property (nonatomic, readonly) BOOL isLoading;
/**
  The members of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3User *> * _Nonnull members;
/**
  The type of membership that the authenticated user has.
  version:
  1.0.0
*/
@property (nonatomic, readonly) enum C3RoomMembership membership;
/**
  The current name of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/**
  All members of the room except for the authenticated user.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3User *> * _Nonnull otherMembers;
/**
  The power levels in the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3PowerLevelsReader * _Nullable powerLevels;
/**
  A list of state types that are present in this room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3RoomState *> * _Nonnull states;
/**
  The current topic of the room.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nullable topic;
/**
  The users in the room that are currently typing.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<C3User *> * _Nonnull typing;
/**
  Start editing the power levels of this room using a \code
  C3PowerLevelsEdit
  \endcode.
  version:
  1.0.0

  returns:
  \code
  C3PowerLevelsEdit
  \endcode instance or nil if the user is a member of the room.
*/
- (C3PowerLevelsEdit * _Nullable)editPowerLevels;
/**
  Invites a user to this room.
  version:
  1.0.0
  \param user The user to invite.

  \param success The callback to be executed upon successful invite. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed invite. Receives failure cause. Can be nil.

*/
- (void)invite:(C3User * _Nonnull)user success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Join this room.
  version:
  1.0.0
  \param success The callback to be executed upon successful join. Receives joined room instance. Can be nil.

  \param failure The callback to be executed upon failed join. Receives failure cause. Can be nil.

*/
- (void)joinWithSuccess:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Kick a user from this room.
  version:
  1.0.0
  \param user The user to kick.

  \param success The callback to be executed upon successful kick. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed kick. Receives failure cause. Can be nil.

*/
- (void)kick:(C3User * _Nonnull)user success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Leave this room.
  version:
  1.0.0
  \param success The callback to be executed upon successful leave. Receives left room instance. Can be nil.

  \param failure The callback to be executed upon failed leave. Receives failure cause. Can be nil.

*/
- (void)leaveWithSuccess:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Load in old events. If multiple requests are sent at once they will be queued after eachother.
  By passing a filterFunction, it is possible to filter whether each event should count towards the total count, and keep loading in events until the total count has been reached. Events that are filtered out by the filter function are not discarded, they simply don’t count towards the load count.
  If a filter function is used the number of matching events might exceed the requested count, since events are loaded in chunks and no events will be ignored.
  version:
  1.0.0
  \param count The number of events to load.

  \param chunkSize Only valid if a filter function is given. It specifies how many events are loaded and filtered with each request. Defaults to 10.

  \param filterFunction Function used to filter out events that should count towards the event count.

  \param success The callback to be executed upon successful fetch. Receives an array of events. Can be nil.

  \param failure The callback to be executed upon failed fetch. Receives failure cause. Can be nil.

*/
- (void)loadWithCount:(NSUInteger)count chunkSize:(NSUInteger)chunkSize filterFunction:(BOOL (^ _Nullable)(C3Event * _Nonnull))filterFunction success:(void (^ _Nullable)(NSArray<C3Event *> * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Send an event.
  version:
  1.0.0
  \param content The content of the event.

  \param type The type of the event.

  \param success The callback to be executed upon successful dispatch. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed dispatch. Receives failure cause. Can be nil.

*/
- (void)send:(NSDictionary<NSString *, id> * _Nonnull)content type:(NSString * _Nonnull)type success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Send a message.
  version:
  1.0.0
  \param message The message to send.

  \param success The callback to be executed upon successful dispatch. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed dispatch. Receives failure cause. Can be nil.

*/
- (void)send:(C3Message * _Nonnull)message success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets the avatar of the room.
  version:
  1.0.0
  \param avatar The new avatar for this room.

  \param success The callback to be executed upon successful set. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setAvatar:(NSString * _Nonnull)avatar success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets how guests are allowed to join the room. If set to \code
  C3GuestAccessRule.open
  \endcode, guests are allowed to join the rule, although they are still subject to the join rule of the room. If set to \code
  C3GuestAccessRule.closed
  \endcode, guests are not allowed to join the room at all.
  The default guest access rule is \code
  C3GuestAccessRule.closed
  \endcode.
  version:
  1.0.0
  \param guestAccessRule The new guest access rule for this room.

  \param success The callback to be executed upon successful set. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setGuestAccessRule:(enum C3GuestAccessRule)guestAccessRule success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets the history visibility of the room.
  version:
  1.0.0
  <ul>
    <li>
      historyVisibility: The new history visibility of this room.
    </li>
  </ul>
  \param success The callback to be executed upon successful set. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setHistoryVisibility:(enum C3HistoryVisibility)historyVisibility success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets how other users are able to join this room. An \code
  C3JoinRule.open
  \endcode room can be joined with anyone that has the room id or an alias of the room, while a room with the \code
  C3JoinRule.invite
  \endcode rule only allows users to join after first being invited to the room by an existing member.
  \param rule The new join rule for this room.

  \param success The callback to be executed upon successful set. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setJoinRule:(enum C3JoinRule)rule success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets the name of the room.
  version:
  1.0.0
  \param name The new name for this room.

  \param success The callback to be executed upon successful set. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setName:(NSString * _Nonnull)name success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets the entire power level state of the room to that of a power level container object.
  version:
  1.0.0
  \param powerLevels A power level container.

  \param success The callback to be executed upon successful set. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setPowerLevels:(C3PowerLevelsContainer * _Nonnull)powerLevels success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets the topic of the room.
  version:
  1.0.0
  \param topic The new topic for this room.

  \param success The callback to be executed upon successful set. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setTopic:(NSString * _Nonnull)topic success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Sets whether the user is currently typing or not, with an optional timeout and margin. The timeout can be used to temporarily set typing to true, while the margin allows throttling of requests.
  The margin permits setTyping to be called at a high rate without actually sending any requests to the server. A request is sent only if the end of the previous request’s timeout has been reached or if the time until then is smaller than the margin.
  e.i. \code
  if (current time + margin) > (previous (request time + timeout))
  \endcode
  Specifying a timeout is only valid when setting typing to true, as setting it to false will always do so indefinetly.
  Setting the typing state will cause any previous state, including timeouts, to be overwritten.
  version:
  1.0.0
  \param typing The new typing state.

  \param timeout Timeout in seconds.

  \param margin Margin in seconds, or -1 to always send a request.

  \param success The callback to be executed upon successful set. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed set. Receives failure cause. Can be nil.

*/
- (void)setTyping:(BOOL)typing timeout:(NSTimeInterval)timeout margin:(NSTimeInterval)margin success:(void (^ _Nullable)(C3Room * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/**
  Initiate a call in the room.
  version:
  1.0.0
  \param user The user to call. The user has to be a member of this room.


  returns:
  The call, or nil in case it is impossible to initiate a call.
*/
- (C3Call * _Nullable)startCallWith:(C3User * _Nonnull)user;
/**
  Starts a new passive call in the room. A passive call works much like a normal call, except that it does not initiate any new call, it only accepts incoming calls.
  This is typically used in the scenario where the creator of a room wants to start setting up a call before knowing who the peer will be.
  Passive calls will always accept incoming calls from new peers, and hang up the call to old ones. Whenever the call connects to a new peer, a \code
  peer
  \endcode event will be emitted from the call.
  version:
  1.0.0

  returns:
  The call.
*/
- (C3Call * _Nullable)startPassiveCall;
/**
  Retrieves the state access object for a state of a specific type in the room.
  version:
  1.0.0
  \param type The state type.


  returns:
  A room state object for interacting with the state.
*/
- (C3RoomState * _Nonnull)state:(NSString * _Nonnull)type;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3Room (SWIFT_EXTENSION(C3Lib))
@end


@interface C3Room (SWIFT_EXTENSION(C3Lib))
@end

/**
  The type of membership that the authenticated user has.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3RoomMembership) {
/**
  The authenticated user is a member in the room.
  version:
  1.0.0
*/
  C3RoomMembershipMember = 0,
/**
  The authenticated user has been invited to the room.
  version:
  1.0.0
*/
  C3RoomMembershipInvited = 1,
/**
  The authenticated user has left the room.
  version:
  1.0.0
*/
  C3RoomMembershipLeft = 2,
/**
  The authenticated user has been kicked from the room.
  version:
  1.0.0
*/
  C3RoomMembershipKicked = 3,
/**
  Unknown status.
  version:
  1.0.0
*/
  C3RoomMembershipUnknown = 4,
};


/**
  Represents a live query that selects a subset of all rooms and transforms them using a map function.
  Whenever a room receives an event, the map function is run for every query. If the map function returns a falsy value, it is ignored. If the value is truthy, the value is added to the resulting rows.
  version:
  1.0.0
  <h1>Example</h1>
  This is an example of a map function that lists all public rooms that the user is a member of:
  \code
  { room -> AnyObject? in
      if room.membership == .member && room.visibility == .public {
          return room
      }
      return nil
  }

  \endcodeWhenever the value returned by the map function changes, an \code
  update
  \endcode event is emitted, as well as \code
  added
  \endcode and/or \code
  removed
  \endcode events. The value is considered changed if it switches between truthy and falsy, or if the id property of the value changes.
  This is an example of a map function that lists all rooms to which the user has been invited, as well as the inviting user:
  \code
  { room -> AnyObject? in
      if room.membership == .invited {
          return [
              "user": room.invitedBy!,
              "room": room
          ]
      }
      return nil
  }

  \endcode<h1>Events</h1>
  <ul>
    <li>
      \code
      added
      \endcode:   Emitted when a row is added to the result of the query. Receives added row.
    </li>
    <li>
      \code
      removed
      \endcode: Emitted when a row is removed from the result of the query. Receives removed row.
    </li>
    <li>
      \code
      updated
      \endcode: Emitted when the result of the query has changed. Receives
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC5C3Lib11C3RoomQuery")
@interface C3RoomQuery : C3EventEmitter
/**
  The resulting rows of the \code
  C3RoomQuery
  \endcode.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray * _Nonnull rows;
/**
  Stops the query and frees all resources.
  version:
  1.0.0
*/
- (void)stop;
/**
  Forces the map function to be rerun for all rooms.
  version:
  1.0.0
*/
- (void)forceUpdate;
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3RoomQuery (SWIFT_EXTENSION(C3Lib))
@end


@interface C3RoomQuery (SWIFT_EXTENSION(C3Lib))
@end


/**
  Represents a state in a room identified by a state type, and synchronized between all clients.
  Each room state is a key-value pair store that emits events when values are changed.
  The room state also has a default value which can be accessed by omitting the key parameter to any of the methods. The default value is handy for simple states such as setting a hex color for the room.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib11C3RoomState")
@interface C3RoomState : C3EventEmitter
/**
  A list of all keys who are associated to a value.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
/**
  The room that the room state is derived from.
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3Room * _Nonnull room;
/**
  The type of the room state.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/**
  Gets the value for the corresponding key.
  If the key is omitted the default value of the room state will returned instead.
  version:
  1.0.0
  \param key The key whose associated value should be returned, or omitted if the default value is desired instead.


  returns:
  The value associated with the key.
*/
- (id _Nullable)get:(NSString * _Nonnull)key;
/**
  Returns true if the key has been set.
  version:
  1.0.0
  \param key The key to test if it has been set.


  returns:
  True if the key has been set, false otherwise.
*/
- (BOOL)has:(NSString * _Nonnull)key;
/**
  Sets the value that a key should be associated with. This will override any existing association with the key.
  If the key is omitted the value of the room state will set instead.
  <h1>Note</h1>
  It is best to avoid relying on the returned promise to modify application state, e.g. UI updates, as that will lead to race conditions and undefined behaviour. It is better to use the success callba for feedback that the state was changed was successfully, and tie application state changes an \code
  update
  \endcode event handler. This is due to the fact that state changes are received via the event stream, but the returned promise is resolved when the request is returned, and those two events can happen in any order.
  version:
  1.0.0
  \param value The value that should be associated with the key.

  \param key The key that should be associated with the value.

  \param success The callback to be executed upon successful kick. Receives room instance. Can be nil.

  \param failure The callback to be executed upon failed kick. Receives failure cause. Can be nil.

*/
- (void)set:(id _Nonnull)value for:(NSString * _Nonnull)key success:(void (^ _Nullable)(C3RoomState * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3RoomState (SWIFT_EXTENSION(C3Lib))
@end

/**
  The room visibility type.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3RoomVisibility) {
/**
  The room is private.
  version:
  1.0.0
*/
  C3RoomVisibilityPrivate = 0,
/**
  The room is public.
  version:
  1.0.0
*/
  C3RoomVisibilityPublic = 1,
};


/**
  A simple media sink that emits a stream event and provides a stream property. Mainly useful for testing.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib12C3StreamSink")
@interface C3StreamSink : C3MediaSink
- (void)onStream:(RTCMediaStream * _Nullable)stream :(RTCMediaStream * _Nullable)oldStream;
- (void)close;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Represents a user.
  version:
  1.0.0
*/
SWIFT_CLASS("_TtC5C3Lib6C3User")
@interface C3User : C3EventEmitter
/**
  The url to the user’s avatar
  version:
  1.0.0
*/
@property (nonatomic, readonly, strong) C3ImageResource * _Nullable avatar;
/**
  The id of the user.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/**
  The last time the user was active.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSDate * _Nullable lastActive;
/**
  The local part of the user’s id, which is the bit of the id that is before the server name, without the “\code
  @
  \endcode” prefix.
  For example, \code
  "@foo:example.com"
  \endcode has the local id \code
  "foo"
  \endcode.
  The local id is what is given when registering a new user.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull localId;
/**
  The name of the user.
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**
  The users presence type
  version:
  1.0.0
*/
@property (nonatomic, readonly) enum C3UserPresence presence;
/**
  A message set by the user
  version:
  1.0.0
*/
@property (nonatomic, readonly, copy) NSString * _Nullable statusMessage;
- (void)close;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface C3User (SWIFT_EXTENSION(C3Lib))
@end


@interface C3User (SWIFT_EXTENSION(C3Lib))
@end

/**
  The users presence type.
  version:
  1.0.0
*/
typedef SWIFT_ENUM(NSInteger, C3UserPresence) {
/**
  User is online and avaliable.
  version:
  1.0.0
*/
  C3UserPresenceOnline = 0,
/**
  User is online and unavailable.
  version:
  1.0.0
*/
  C3UserPresenceUnavailable = 1,
/**
  User if offline.
  version:
  1.0.0
*/
  C3UserPresenceOffline = 2,
};


@interface MXAuthenticationSession (SWIFT_EXTENSION(C3Lib))
@end


@interface RTCPeerConnectionFactory (SWIFT_EXTENSION(C3Lib))
@end

#pragma clang diagnostic pop
